// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace serial {
constexpr RoutingSettings::RoutingSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bus_velocity_(0)
  , bus_wait_time_(0){}
struct RoutingSettingsDefaultTypeInternal {
  constexpr RoutingSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingSettingsDefaultTypeInternal() {}
  union {
    RoutingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
constexpr StopList_Stop::StopList_Stop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lat_(0)
  , lng_(0)
  , id_(0u){}
struct StopList_StopDefaultTypeInternal {
  constexpr StopList_StopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopList_StopDefaultTypeInternal() {}
  union {
    StopList_Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopList_StopDefaultTypeInternal _StopList_Stop_default_instance_;
constexpr StopList::StopList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_storage_(){}
struct StopListDefaultTypeInternal {
  constexpr StopListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopListDefaultTypeInternal() {}
  union {
    StopList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopListDefaultTypeInternal _StopList_default_instance_;
constexpr BusList_Bus::BusList_Bus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_id_()
  , _stops_id_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_rounded_(false)
  , id_(0u){}
struct BusList_BusDefaultTypeInternal {
  constexpr BusList_BusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusList_BusDefaultTypeInternal() {}
  union {
    BusList_Bus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusList_BusDefaultTypeInternal _BusList_Bus_default_instance_;
constexpr BusList::BusList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bus_storage_(){}
struct BusListDefaultTypeInternal {
  constexpr BusListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusListDefaultTypeInternal() {}
  union {
    BusList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusListDefaultTypeInternal _BusList_default_instance_;
constexpr StopsToDist_StopIdPair::StopsToDist_StopIdPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_stop_(0u)
  , last_stop_(0u){}
struct StopsToDist_StopIdPairDefaultTypeInternal {
  constexpr StopsToDist_StopIdPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopsToDist_StopIdPairDefaultTypeInternal() {}
  union {
    StopsToDist_StopIdPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopsToDist_StopIdPairDefaultTypeInternal _StopsToDist_StopIdPair_default_instance_;
constexpr StopsToDist::StopsToDist(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_between_(nullptr)
  , dist_(0){}
struct StopsToDistDefaultTypeInternal {
  constexpr StopsToDistDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopsToDistDefaultTypeInternal() {}
  union {
    StopsToDist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopsToDistDefaultTypeInternal _StopsToDist_default_instance_;
constexpr RouteInfo::RouteInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_lenght_(0)
  , curvuture_(0){}
struct RouteInfoDefaultTypeInternal {
  constexpr RouteInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteInfoDefaultTypeInternal() {}
  union {
    RouteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteInfoDefaultTypeInternal _RouteInfo_default_instance_;
constexpr BusIDToRouteInfo_RouteInfoEntry_DoNotUse::BusIDToRouteInfo_RouteInfoEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BusIDToRouteInfo_RouteInfoEntry_DoNotUseDefaultTypeInternal {
  constexpr BusIDToRouteInfo_RouteInfoEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusIDToRouteInfo_RouteInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BusIDToRouteInfo_RouteInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusIDToRouteInfo_RouteInfoEntry_DoNotUseDefaultTypeInternal _BusIDToRouteInfo_RouteInfoEntry_DoNotUse_default_instance_;
constexpr BusIDToRouteInfo::BusIDToRouteInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_info_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct BusIDToRouteInfoDefaultTypeInternal {
  constexpr BusIDToRouteInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusIDToRouteInfoDefaultTypeInternal() {}
  union {
    BusIDToRouteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusIDToRouteInfoDefaultTypeInternal _BusIDToRouteInfo_default_instance_;
constexpr TransportCatalogue::TransportCatalogue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_to_dist_()
  , stop_storage_(nullptr)
  , bus_storage_(nullptr)
  , route_info_(nullptr)
  , render_settings_(nullptr)
  , routing_settings_(nullptr){}
struct TransportCatalogueDefaultTypeInternal {
  constexpr TransportCatalogueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportCatalogueDefaultTypeInternal() {}
  union {
    TransportCatalogue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace serial
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalogue_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::RoutingSettings, bus_velocity_),
  PROTOBUF_FIELD_OFFSET(::serial::RoutingSettings, bus_wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::StopList_Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::StopList_Stop, name_),
  PROTOBUF_FIELD_OFFSET(::serial::StopList_Stop, lat_),
  PROTOBUF_FIELD_OFFSET(::serial::StopList_Stop, lng_),
  PROTOBUF_FIELD_OFFSET(::serial::StopList_Stop, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::StopList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::StopList, stop_storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::BusList_Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::BusList_Bus, name_),
  PROTOBUF_FIELD_OFFSET(::serial::BusList_Bus, stops_id_),
  PROTOBUF_FIELD_OFFSET(::serial::BusList_Bus, is_rounded_),
  PROTOBUF_FIELD_OFFSET(::serial::BusList_Bus, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::BusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::BusList, bus_storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::StopsToDist_StopIdPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::StopsToDist_StopIdPair, first_stop_),
  PROTOBUF_FIELD_OFFSET(::serial::StopsToDist_StopIdPair, last_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::StopsToDist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::StopsToDist, stops_between_),
  PROTOBUF_FIELD_OFFSET(::serial::StopsToDist, dist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::RouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::RouteInfo, route_lenght_),
  PROTOBUF_FIELD_OFFSET(::serial::RouteInfo, curvuture_),
  PROTOBUF_FIELD_OFFSET(::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::BusIDToRouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::BusIDToRouteInfo, route_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serial::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serial::TransportCatalogue, stop_storage_),
  PROTOBUF_FIELD_OFFSET(::serial::TransportCatalogue, bus_storage_),
  PROTOBUF_FIELD_OFFSET(::serial::TransportCatalogue, stops_to_dist_),
  PROTOBUF_FIELD_OFFSET(::serial::TransportCatalogue, route_info_),
  PROTOBUF_FIELD_OFFSET(::serial::TransportCatalogue, render_settings_),
  PROTOBUF_FIELD_OFFSET(::serial::TransportCatalogue, routing_settings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::serial::RoutingSettings)},
  { 7, -1, sizeof(::serial::StopList_Stop)},
  { 16, -1, sizeof(::serial::StopList)},
  { 22, -1, sizeof(::serial::BusList_Bus)},
  { 31, -1, sizeof(::serial::BusList)},
  { 37, -1, sizeof(::serial::StopsToDist_StopIdPair)},
  { 44, -1, sizeof(::serial::StopsToDist)},
  { 51, -1, sizeof(::serial::RouteInfo)},
  { 58, 65, sizeof(::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse)},
  { 67, -1, sizeof(::serial::BusIDToRouteInfo)},
  { 73, -1, sizeof(::serial::TransportCatalogue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_RoutingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_StopList_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_StopList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_BusList_Bus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_BusList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_StopsToDist_StopIdPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_StopsToDist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_RouteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_BusIDToRouteInfo_RouteInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_BusIDToRouteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serial::_TransportCatalogue_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\006serial\032\022map"
  "_renderer.proto\">\n\017RoutingSettings\022\024\n\014bu"
  "s_velocity\030\001 \001(\005\022\025\n\rbus_wait_time\030\002 \001(\005\""
  "s\n\010StopList\022+\n\014stop_storage\030\001 \003(\0132\025.seri"
  "al.StopList.Stop\032:\n\004Stop\022\014\n\004name\030\001 \001(\t\022\013"
  "\n\003lat\030\002 \001(\001\022\013\n\003lng\030\003 \001(\001\022\n\n\002id\030\004 \001(\r\"z\n\007"
  "BusList\022(\n\013bus_storage\030\001 \003(\0132\023.serial.Bu"
  "sList.Bus\032E\n\003Bus\022\014\n\004name\030\001 \001(\t\022\020\n\010stops_"
  "id\030\002 \003(\r\022\022\n\nis_rounded\030\003 \001(\010\022\n\n\002id\030\004 \001(\r"
  "\"\207\001\n\013StopsToDist\0225\n\rstops_between\030\001 \001(\0132"
  "\036.serial.StopsToDist.StopIdPair\022\014\n\004dist\030"
  "\002 \001(\001\0323\n\nStopIdPair\022\022\n\nfirst_stop\030\001 \001(\r\022"
  "\021\n\tlast_stop\030\002 \001(\r\"4\n\tRouteInfo\022\024\n\014route"
  "_lenght\030\001 \001(\001\022\021\n\tcurvuture\030\002 \001(\001\"\224\001\n\020Bus"
  "IDToRouteInfo\022;\n\nroute_info\030\001 \003(\0132\'.seri"
  "al.BusIDToRouteInfo.RouteInfoEntry\032C\n\016Ro"
  "uteInfoEntry\022\013\n\003key\030\001 \001(\r\022 \n\005value\030\002 \001(\013"
  "2\021.serial.RouteInfo:\0028\001\"\240\002\n\022TransportCat"
  "alogue\022&\n\014stop_storage\030\001 \001(\0132\020.serial.St"
  "opList\022$\n\013bus_storage\030\002 \001(\0132\017.serial.Bus"
  "List\022*\n\rstops_to_dist\030\004 \003(\0132\023.serial.Sto"
  "psToDist\022,\n\nroute_info\030\005 \001(\0132\030.serial.Bu"
  "sIDToRouteInfo\022/\n\017render_settings\030\006 \001(\0132"
  "\026.serial.RenderSettings\0221\n\020routing_setti"
  "ngs\030\007 \001(\0132\027.serial.RoutingSettingsb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalogue_2eproto_deps[1] = {
  &::descriptor_table_map_5frenderer_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
  false, false, 1002, descriptor_table_protodef_transport_5fcatalogue_2eproto, "transport_catalogue.proto", 
  &descriptor_table_transport_5fcatalogue_2eproto_once, descriptor_table_transport_5fcatalogue_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
  file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto, file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_transport_5fcatalogue_2eproto_getter() {
  return &descriptor_table_transport_5fcatalogue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace serial {

// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bus_velocity_, &from.bus_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_wait_time_) -
    reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  // @@protoc_insertion_point(copy_constructor:serial.RoutingSettings)
}

inline void RoutingSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bus_velocity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bus_wait_time_) -
    reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:serial.RoutingSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingSettings::ArenaDtor(void* object) {
  RoutingSettings* _this = reinterpret_cast< RoutingSettings* >(object);
  (void)_this;
}
void RoutingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_wait_time_) -
      reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bus_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bus_wait_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_velocity = 1;
  if (this->_internal_bus_velocity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_velocity(), target);
  }

  // int32 bus_wait_time = 2;
  if (this->_internal_bus_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bus_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.RoutingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bus_velocity = 1;
  if (this->_internal_bus_velocity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_velocity());
  }

  // int32 bus_wait_time = 2;
  if (this->_internal_bus_wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_wait_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSettings::GetClassData() const { return &_class_data_; }

void RoutingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingSettings *>(to)->MergeFrom(
      static_cast<const RoutingSettings &>(from));
}


void RoutingSettings::MergeFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bus_velocity() != 0) {
    _internal_set_bus_velocity(from._internal_bus_velocity());
  }
  if (from._internal_bus_wait_time() != 0) {
    _internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, bus_wait_time_)
      + sizeof(RoutingSettings::bus_wait_time_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, bus_velocity_)>(
          reinterpret_cast<char*>(&bus_velocity_),
          reinterpret_cast<char*>(&other->bus_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[0]);
}

// ===================================================================

class StopList_Stop::_Internal {
 public:
};

StopList_Stop::StopList_Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.StopList.Stop)
}
StopList_Stop::StopList_Stop(const StopList_Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:serial.StopList.Stop)
}

inline void StopList_Stop::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(id_));
}

StopList_Stop::~StopList_Stop() {
  // @@protoc_insertion_point(destructor:serial.StopList.Stop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopList_Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopList_Stop::ArenaDtor(void* object) {
  StopList_Stop* _this = reinterpret_cast< StopList_Stop* >(object);
  (void)_this;
}
void StopList_Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopList_Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopList_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.StopList.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopList_Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serial.StopList.Stop.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lng = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopList_Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.StopList.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serial.StopList.Stop.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double lat = 2;
  if (!(this->_internal_lat() <= 0 && this->_internal_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lat(), target);
  }

  // double lng = 3;
  if (!(this->_internal_lng() <= 0 && this->_internal_lng() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lng(), target);
  }

  // uint32 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.StopList.Stop)
  return target;
}

size_t StopList_Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.StopList.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double lat = 2;
  if (!(this->_internal_lat() <= 0 && this->_internal_lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lng = 3;
  if (!(this->_internal_lng() <= 0 && this->_internal_lng() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 id = 4;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopList_Stop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopList_Stop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopList_Stop::GetClassData() const { return &_class_data_; }

void StopList_Stop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StopList_Stop *>(to)->MergeFrom(
      static_cast<const StopList_Stop &>(from));
}


void StopList_Stop::MergeFrom(const StopList_Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.StopList.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!(from._internal_lat() <= 0 && from._internal_lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from._internal_lng() <= 0 && from._internal_lng() >= 0)) {
    _internal_set_lng(from._internal_lng());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopList_Stop::CopyFrom(const StopList_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.StopList.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopList_Stop::IsInitialized() const {
  return true;
}

void StopList_Stop::InternalSwap(StopList_Stop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopList_Stop, id_)
      + sizeof(StopList_Stop::id_)
      - PROTOBUF_FIELD_OFFSET(StopList_Stop, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopList_Stop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[1]);
}

// ===================================================================

class StopList::_Internal {
 public:
};

StopList::StopList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stop_storage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.StopList)
}
StopList::StopList(const StopList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stop_storage_(from.stop_storage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serial.StopList)
}

inline void StopList::SharedCtor() {
}

StopList::~StopList() {
  // @@protoc_insertion_point(destructor:serial.StopList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopList::ArenaDtor(void* object) {
  StopList* _this = reinterpret_cast< StopList* >(object);
  (void)_this;
}
void StopList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopList::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.StopList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_storage_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .serial.StopList.Stop stop_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_storage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.StopList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serial.StopList.Stop stop_storage = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_storage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stop_storage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.StopList)
  return target;
}

size_t StopList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.StopList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serial.StopList.Stop stop_storage = 1;
  total_size += 1UL * this->_internal_stop_storage_size();
  for (const auto& msg : this->stop_storage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopList::GetClassData() const { return &_class_data_; }

void StopList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StopList *>(to)->MergeFrom(
      static_cast<const StopList &>(from));
}


void StopList::MergeFrom(const StopList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.StopList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_storage_.MergeFrom(from.stop_storage_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopList::CopyFrom(const StopList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.StopList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopList::IsInitialized() const {
  return true;
}

void StopList::InternalSwap(StopList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stop_storage_.InternalSwap(&other->stop_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[2]);
}

// ===================================================================

class BusList_Bus::_Internal {
 public:
};

BusList_Bus::BusList_Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.BusList.Bus)
}
BusList_Bus::BusList_Bus(const BusList_Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_id_(from.stops_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_rounded_, &from.is_rounded_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&is_rounded_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:serial.BusList.Bus)
}

inline void BusList_Bus::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_rounded_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&is_rounded_)) + sizeof(id_));
}

BusList_Bus::~BusList_Bus() {
  // @@protoc_insertion_point(destructor:serial.BusList.Bus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusList_Bus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusList_Bus::ArenaDtor(void* object) {
  BusList_Bus* _this = reinterpret_cast< BusList_Bus* >(object);
  (void)_this;
}
void BusList_Bus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusList_Bus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusList_Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.BusList.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_id_.Clear();
  name_.ClearToEmpty();
  ::memset(&is_rounded_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&is_rounded_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusList_Bus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "serial.BusList.Bus.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stops_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stops_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_stops_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_rounded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_rounded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusList_Bus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.BusList.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serial.BusList.Bus.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated uint32 stops_id = 2;
  {
    int byte_size = _stops_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_stops_id(), byte_size, target);
    }
  }

  // bool is_rounded = 3;
  if (this->_internal_is_rounded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_rounded(), target);
  }

  // uint32 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.BusList.Bus)
  return target;
}

size_t BusList_Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.BusList.Bus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 stops_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stops_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stops_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool is_rounded = 3;
  if (this->_internal_is_rounded() != 0) {
    total_size += 1 + 1;
  }

  // uint32 id = 4;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusList_Bus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusList_Bus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusList_Bus::GetClassData() const { return &_class_data_; }

void BusList_Bus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BusList_Bus *>(to)->MergeFrom(
      static_cast<const BusList_Bus &>(from));
}


void BusList_Bus::MergeFrom(const BusList_Bus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.BusList.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_id_.MergeFrom(from.stops_id_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_is_rounded() != 0) {
    _internal_set_is_rounded(from._internal_is_rounded());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusList_Bus::CopyFrom(const BusList_Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.BusList.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusList_Bus::IsInitialized() const {
  return true;
}

void BusList_Bus::InternalSwap(BusList_Bus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_id_.InternalSwap(&other->stops_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusList_Bus, id_)
      + sizeof(BusList_Bus::id_)
      - PROTOBUF_FIELD_OFFSET(BusList_Bus, is_rounded_)>(
          reinterpret_cast<char*>(&is_rounded_),
          reinterpret_cast<char*>(&other->is_rounded_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusList_Bus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[3]);
}

// ===================================================================

class BusList::_Internal {
 public:
};

BusList::BusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bus_storage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.BusList)
}
BusList::BusList(const BusList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bus_storage_(from.bus_storage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serial.BusList)
}

inline void BusList::SharedCtor() {
}

BusList::~BusList() {
  // @@protoc_insertion_point(destructor:serial.BusList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BusList::ArenaDtor(void* object) {
  BusList* _this = reinterpret_cast< BusList* >(object);
  (void)_this;
}
void BusList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusList::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.BusList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bus_storage_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .serial.BusList.Bus bus_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bus_storage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.BusList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serial.BusList.Bus bus_storage = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bus_storage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bus_storage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.BusList)
  return target;
}

size_t BusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.BusList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serial.BusList.Bus bus_storage = 1;
  total_size += 1UL * this->_internal_bus_storage_size();
  for (const auto& msg : this->bus_storage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusList::GetClassData() const { return &_class_data_; }

void BusList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BusList *>(to)->MergeFrom(
      static_cast<const BusList &>(from));
}


void BusList::MergeFrom(const BusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.BusList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bus_storage_.MergeFrom(from.bus_storage_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusList::CopyFrom(const BusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.BusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusList::IsInitialized() const {
  return true;
}

void BusList::InternalSwap(BusList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bus_storage_.InternalSwap(&other->bus_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[4]);
}

// ===================================================================

class StopsToDist_StopIdPair::_Internal {
 public:
};

StopsToDist_StopIdPair::StopsToDist_StopIdPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.StopsToDist.StopIdPair)
}
StopsToDist_StopIdPair::StopsToDist_StopIdPair(const StopsToDist_StopIdPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&first_stop_, &from.first_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_stop_) -
    reinterpret_cast<char*>(&first_stop_)) + sizeof(last_stop_));
  // @@protoc_insertion_point(copy_constructor:serial.StopsToDist.StopIdPair)
}

inline void StopsToDist_StopIdPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&first_stop_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_stop_) -
    reinterpret_cast<char*>(&first_stop_)) + sizeof(last_stop_));
}

StopsToDist_StopIdPair::~StopsToDist_StopIdPair() {
  // @@protoc_insertion_point(destructor:serial.StopsToDist.StopIdPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopsToDist_StopIdPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopsToDist_StopIdPair::ArenaDtor(void* object) {
  StopsToDist_StopIdPair* _this = reinterpret_cast< StopsToDist_StopIdPair* >(object);
  (void)_this;
}
void StopsToDist_StopIdPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopsToDist_StopIdPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopsToDist_StopIdPair::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.StopsToDist.StopIdPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&first_stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_stop_) -
      reinterpret_cast<char*>(&first_stop_)) + sizeof(last_stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopsToDist_StopIdPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 first_stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          first_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopsToDist_StopIdPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.StopsToDist.StopIdPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_stop = 1;
  if (this->_internal_first_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_first_stop(), target);
  }

  // uint32 last_stop = 2;
  if (this->_internal_last_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.StopsToDist.StopIdPair)
  return target;
}

size_t StopsToDist_StopIdPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.StopsToDist.StopIdPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 first_stop = 1;
  if (this->_internal_first_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first_stop());
  }

  // uint32 last_stop = 2;
  if (this->_internal_last_stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_stop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopsToDist_StopIdPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopsToDist_StopIdPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopsToDist_StopIdPair::GetClassData() const { return &_class_data_; }

void StopsToDist_StopIdPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StopsToDist_StopIdPair *>(to)->MergeFrom(
      static_cast<const StopsToDist_StopIdPair &>(from));
}


void StopsToDist_StopIdPair::MergeFrom(const StopsToDist_StopIdPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.StopsToDist.StopIdPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_first_stop() != 0) {
    _internal_set_first_stop(from._internal_first_stop());
  }
  if (from._internal_last_stop() != 0) {
    _internal_set_last_stop(from._internal_last_stop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopsToDist_StopIdPair::CopyFrom(const StopsToDist_StopIdPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.StopsToDist.StopIdPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopsToDist_StopIdPair::IsInitialized() const {
  return true;
}

void StopsToDist_StopIdPair::InternalSwap(StopsToDist_StopIdPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopsToDist_StopIdPair, last_stop_)
      + sizeof(StopsToDist_StopIdPair::last_stop_)
      - PROTOBUF_FIELD_OFFSET(StopsToDist_StopIdPair, first_stop_)>(
          reinterpret_cast<char*>(&first_stop_),
          reinterpret_cast<char*>(&other->first_stop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopsToDist_StopIdPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[5]);
}

// ===================================================================

class StopsToDist::_Internal {
 public:
  static const ::serial::StopsToDist_StopIdPair& stops_between(const StopsToDist* msg);
};

const ::serial::StopsToDist_StopIdPair&
StopsToDist::_Internal::stops_between(const StopsToDist* msg) {
  return *msg->stops_between_;
}
StopsToDist::StopsToDist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.StopsToDist)
}
StopsToDist::StopsToDist(const StopsToDist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stops_between()) {
    stops_between_ = new ::serial::StopsToDist_StopIdPair(*from.stops_between_);
  } else {
    stops_between_ = nullptr;
  }
  dist_ = from.dist_;
  // @@protoc_insertion_point(copy_constructor:serial.StopsToDist)
}

inline void StopsToDist::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stops_between_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dist_) -
    reinterpret_cast<char*>(&stops_between_)) + sizeof(dist_));
}

StopsToDist::~StopsToDist() {
  // @@protoc_insertion_point(destructor:serial.StopsToDist)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopsToDist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stops_between_;
}

void StopsToDist::ArenaDtor(void* object) {
  StopsToDist* _this = reinterpret_cast< StopsToDist* >(object);
  (void)_this;
}
void StopsToDist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopsToDist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopsToDist::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.StopsToDist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && stops_between_ != nullptr) {
    delete stops_between_;
  }
  stops_between_ = nullptr;
  dist_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopsToDist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .serial.StopsToDist.StopIdPair stops_between = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stops_between(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopsToDist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.StopsToDist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serial.StopsToDist.StopIdPair stops_between = 1;
  if (this->_internal_has_stops_between()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stops_between(this), target, stream);
  }

  // double dist = 2;
  if (!(this->_internal_dist() <= 0 && this->_internal_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.StopsToDist)
  return target;
}

size_t StopsToDist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.StopsToDist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .serial.StopsToDist.StopIdPair stops_between = 1;
  if (this->_internal_has_stops_between()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stops_between_);
  }

  // double dist = 2;
  if (!(this->_internal_dist() <= 0 && this->_internal_dist() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopsToDist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopsToDist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopsToDist::GetClassData() const { return &_class_data_; }

void StopsToDist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StopsToDist *>(to)->MergeFrom(
      static_cast<const StopsToDist &>(from));
}


void StopsToDist::MergeFrom(const StopsToDist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.StopsToDist)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stops_between()) {
    _internal_mutable_stops_between()->::serial::StopsToDist_StopIdPair::MergeFrom(from._internal_stops_between());
  }
  if (!(from._internal_dist() <= 0 && from._internal_dist() >= 0)) {
    _internal_set_dist(from._internal_dist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopsToDist::CopyFrom(const StopsToDist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.StopsToDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopsToDist::IsInitialized() const {
  return true;
}

void StopsToDist::InternalSwap(StopsToDist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopsToDist, dist_)
      + sizeof(StopsToDist::dist_)
      - PROTOBUF_FIELD_OFFSET(StopsToDist, stops_between_)>(
          reinterpret_cast<char*>(&stops_between_),
          reinterpret_cast<char*>(&other->stops_between_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopsToDist::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[6]);
}

// ===================================================================

class RouteInfo::_Internal {
 public:
};

RouteInfo::RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&route_lenght_, &from.route_lenght_,
    static_cast<size_t>(reinterpret_cast<char*>(&curvuture_) -
    reinterpret_cast<char*>(&route_lenght_)) + sizeof(curvuture_));
  // @@protoc_insertion_point(copy_constructor:serial.RouteInfo)
}

inline void RouteInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&route_lenght_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curvuture_) -
    reinterpret_cast<char*>(&route_lenght_)) + sizeof(curvuture_));
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:serial.RouteInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteInfo::ArenaDtor(void* object) {
  RouteInfo* _this = reinterpret_cast< RouteInfo* >(object);
  (void)_this;
}
void RouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&route_lenght_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvuture_) -
      reinterpret_cast<char*>(&route_lenght_)) + sizeof(curvuture_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double route_lenght = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          route_lenght_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curvuture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          curvuture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double route_lenght = 1;
  if (!(this->_internal_route_lenght() <= 0 && this->_internal_route_lenght() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_route_lenght(), target);
  }

  // double curvuture = 2;
  if (!(this->_internal_curvuture() <= 0 && this->_internal_curvuture() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_curvuture(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.RouteInfo)
  return target;
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.RouteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double route_lenght = 1;
  if (!(this->_internal_route_lenght() <= 0 && this->_internal_route_lenght() >= 0)) {
    total_size += 1 + 8;
  }

  // double curvuture = 2;
  if (!(this->_internal_curvuture() <= 0 && this->_internal_curvuture() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteInfo::GetClassData() const { return &_class_data_; }

void RouteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RouteInfo *>(to)->MergeFrom(
      static_cast<const RouteInfo &>(from));
}


void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_route_lenght() <= 0 && from._internal_route_lenght() >= 0)) {
    _internal_set_route_lenght(from._internal_route_lenght());
  }
  if (!(from._internal_curvuture() <= 0 && from._internal_curvuture() >= 0)) {
    _internal_set_curvuture(from._internal_curvuture());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::InternalSwap(RouteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInfo, curvuture_)
      + sizeof(RouteInfo::curvuture_)
      - PROTOBUF_FIELD_OFFSET(RouteInfo, route_lenght_)>(
          reinterpret_cast<char*>(&route_lenght_),
          reinterpret_cast<char*>(&other->route_lenght_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[7]);
}

// ===================================================================

BusIDToRouteInfo_RouteInfoEntry_DoNotUse::BusIDToRouteInfo_RouteInfoEntry_DoNotUse() {}
BusIDToRouteInfo_RouteInfoEntry_DoNotUse::BusIDToRouteInfo_RouteInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BusIDToRouteInfo_RouteInfoEntry_DoNotUse::MergeFrom(const BusIDToRouteInfo_RouteInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BusIDToRouteInfo_RouteInfoEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[8]);
}

// ===================================================================

class BusIDToRouteInfo::_Internal {
 public:
};

BusIDToRouteInfo::BusIDToRouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  route_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.BusIDToRouteInfo)
}
BusIDToRouteInfo::BusIDToRouteInfo(const BusIDToRouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  route_info_.MergeFrom(from.route_info_);
  // @@protoc_insertion_point(copy_constructor:serial.BusIDToRouteInfo)
}

inline void BusIDToRouteInfo::SharedCtor() {
}

BusIDToRouteInfo::~BusIDToRouteInfo() {
  // @@protoc_insertion_point(destructor:serial.BusIDToRouteInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusIDToRouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BusIDToRouteInfo::ArenaDtor(void* object) {
  BusIDToRouteInfo* _this = reinterpret_cast< BusIDToRouteInfo* >(object);
  (void)_this;
  _this->route_info_. ~MapField();
}
inline void BusIDToRouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &BusIDToRouteInfo::ArenaDtor);
  }
}
void BusIDToRouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusIDToRouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.BusIDToRouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusIDToRouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .serial.RouteInfo> route_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&route_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusIDToRouteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.BusIDToRouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .serial.RouteInfo> route_info = 1;
  if (!this->_internal_route_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_route_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_route_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >::const_iterator
          it = this->_internal_route_info().begin();
          it != this->_internal_route_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BusIDToRouteInfo_RouteInfoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >::const_iterator
          it = this->_internal_route_info().begin();
          it != this->_internal_route_info().end(); ++it) {
        target = BusIDToRouteInfo_RouteInfoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.BusIDToRouteInfo)
  return target;
}

size_t BusIDToRouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.BusIDToRouteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .serial.RouteInfo> route_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_route_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >::const_iterator
      it = this->_internal_route_info().begin();
      it != this->_internal_route_info().end(); ++it) {
    total_size += BusIDToRouteInfo_RouteInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusIDToRouteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusIDToRouteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusIDToRouteInfo::GetClassData() const { return &_class_data_; }

void BusIDToRouteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BusIDToRouteInfo *>(to)->MergeFrom(
      static_cast<const BusIDToRouteInfo &>(from));
}


void BusIDToRouteInfo::MergeFrom(const BusIDToRouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.BusIDToRouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_info_.MergeFrom(from.route_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusIDToRouteInfo::CopyFrom(const BusIDToRouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.BusIDToRouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusIDToRouteInfo::IsInitialized() const {
  return true;
}

void BusIDToRouteInfo::InternalSwap(BusIDToRouteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  route_info_.InternalSwap(&other->route_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusIDToRouteInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[9]);
}

// ===================================================================

class TransportCatalogue::_Internal {
 public:
  static const ::serial::StopList& stop_storage(const TransportCatalogue* msg);
  static const ::serial::BusList& bus_storage(const TransportCatalogue* msg);
  static const ::serial::BusIDToRouteInfo& route_info(const TransportCatalogue* msg);
  static const ::serial::RenderSettings& render_settings(const TransportCatalogue* msg);
  static const ::serial::RoutingSettings& routing_settings(const TransportCatalogue* msg);
};

const ::serial::StopList&
TransportCatalogue::_Internal::stop_storage(const TransportCatalogue* msg) {
  return *msg->stop_storage_;
}
const ::serial::BusList&
TransportCatalogue::_Internal::bus_storage(const TransportCatalogue* msg) {
  return *msg->bus_storage_;
}
const ::serial::BusIDToRouteInfo&
TransportCatalogue::_Internal::route_info(const TransportCatalogue* msg) {
  return *msg->route_info_;
}
const ::serial::RenderSettings&
TransportCatalogue::_Internal::render_settings(const TransportCatalogue* msg) {
  return *msg->render_settings_;
}
const ::serial::RoutingSettings&
TransportCatalogue::_Internal::routing_settings(const TransportCatalogue* msg) {
  return *msg->routing_settings_;
}
void TransportCatalogue::clear_render_settings() {
  if (GetArenaForAllocation() == nullptr && render_settings_ != nullptr) {
    delete render_settings_;
  }
  render_settings_ = nullptr;
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_to_dist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:serial.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_to_dist_(from.stops_to_dist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stop_storage()) {
    stop_storage_ = new ::serial::StopList(*from.stop_storage_);
  } else {
    stop_storage_ = nullptr;
  }
  if (from._internal_has_bus_storage()) {
    bus_storage_ = new ::serial::BusList(*from.bus_storage_);
  } else {
    bus_storage_ = nullptr;
  }
  if (from._internal_has_route_info()) {
    route_info_ = new ::serial::BusIDToRouteInfo(*from.route_info_);
  } else {
    route_info_ = nullptr;
  }
  if (from._internal_has_render_settings()) {
    render_settings_ = new ::serial::RenderSettings(*from.render_settings_);
  } else {
    render_settings_ = nullptr;
  }
  if (from._internal_has_routing_settings()) {
    routing_settings_ = new ::serial::RoutingSettings(*from.routing_settings_);
  } else {
    routing_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:serial.TransportCatalogue)
}

inline void TransportCatalogue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routing_settings_) -
    reinterpret_cast<char*>(&stop_storage_)) + sizeof(routing_settings_));
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:serial.TransportCatalogue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stop_storage_;
  if (this != internal_default_instance()) delete bus_storage_;
  if (this != internal_default_instance()) delete route_info_;
  if (this != internal_default_instance()) delete render_settings_;
  if (this != internal_default_instance()) delete routing_settings_;
}

void TransportCatalogue::ArenaDtor(void* object) {
  TransportCatalogue* _this = reinterpret_cast< TransportCatalogue* >(object);
  (void)_this;
}
void TransportCatalogue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalogue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:serial.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_to_dist_.Clear();
  if (GetArenaForAllocation() == nullptr && stop_storage_ != nullptr) {
    delete stop_storage_;
  }
  stop_storage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bus_storage_ != nullptr) {
    delete bus_storage_;
  }
  bus_storage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && route_info_ != nullptr) {
    delete route_info_;
  }
  route_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && render_settings_ != nullptr) {
    delete render_settings_;
  }
  render_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .serial.StopList stop_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serial.BusList bus_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .serial.StopsToDist stops_to_dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_to_dist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .serial.BusIDToRouteInfo route_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serial.RenderSettings render_settings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serial.RoutingSettings routing_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalogue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serial.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .serial.StopList stop_storage = 1;
  if (this->_internal_has_stop_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stop_storage(this), target, stream);
  }

  // .serial.BusList bus_storage = 2;
  if (this->_internal_has_bus_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bus_storage(this), target, stream);
  }

  // repeated .serial.StopsToDist stops_to_dist = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_to_dist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stops_to_dist(i), target, stream);
  }

  // .serial.BusIDToRouteInfo route_info = 5;
  if (this->_internal_has_route_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::route_info(this), target, stream);
  }

  // .serial.RenderSettings render_settings = 6;
  if (this->_internal_has_render_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::render_settings(this), target, stream);
  }

  // .serial.RoutingSettings routing_settings = 7;
  if (this->_internal_has_routing_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::routing_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serial.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serial.TransportCatalogue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serial.StopsToDist stops_to_dist = 4;
  total_size += 1UL * this->_internal_stops_to_dist_size();
  for (const auto& msg : this->stops_to_dist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .serial.StopList stop_storage = 1;
  if (this->_internal_has_stop_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_storage_);
  }

  // .serial.BusList bus_storage = 2;
  if (this->_internal_has_bus_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bus_storage_);
  }

  // .serial.BusIDToRouteInfo route_info = 5;
  if (this->_internal_has_route_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_info_);
  }

  // .serial.RenderSettings render_settings = 6;
  if (this->_internal_has_render_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *render_settings_);
  }

  // .serial.RoutingSettings routing_settings = 7;
  if (this->_internal_has_routing_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportCatalogue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportCatalogue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportCatalogue::GetClassData() const { return &_class_data_; }

void TransportCatalogue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransportCatalogue *>(to)->MergeFrom(
      static_cast<const TransportCatalogue &>(from));
}


void TransportCatalogue::MergeFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serial.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_to_dist_.MergeFrom(from.stops_to_dist_);
  if (from._internal_has_stop_storage()) {
    _internal_mutable_stop_storage()->::serial::StopList::MergeFrom(from._internal_stop_storage());
  }
  if (from._internal_has_bus_storage()) {
    _internal_mutable_bus_storage()->::serial::BusList::MergeFrom(from._internal_bus_storage());
  }
  if (from._internal_has_route_info()) {
    _internal_mutable_route_info()->::serial::BusIDToRouteInfo::MergeFrom(from._internal_route_info());
  }
  if (from._internal_has_render_settings()) {
    _internal_mutable_render_settings()->::serial::RenderSettings::MergeFrom(from._internal_render_settings());
  }
  if (from._internal_has_routing_settings()) {
    _internal_mutable_routing_settings()->::serial::RoutingSettings::MergeFrom(from._internal_routing_settings());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serial.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_to_dist_.InternalSwap(&other->stops_to_dist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalogue, routing_settings_)
      + sizeof(TransportCatalogue::routing_settings_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalogue, stop_storage_)>(
          reinterpret_cast<char*>(&stop_storage_),
          reinterpret_cast<char*>(&other->stop_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serial::RoutingSettings* Arena::CreateMaybeMessage< ::serial::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::StopList_Stop* Arena::CreateMaybeMessage< ::serial::StopList_Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::StopList_Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::StopList* Arena::CreateMaybeMessage< ::serial::StopList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::StopList >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::BusList_Bus* Arena::CreateMaybeMessage< ::serial::BusList_Bus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::BusList_Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::BusList* Arena::CreateMaybeMessage< ::serial::BusList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::BusList >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::StopsToDist_StopIdPair* Arena::CreateMaybeMessage< ::serial::StopsToDist_StopIdPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::StopsToDist_StopIdPair >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::StopsToDist* Arena::CreateMaybeMessage< ::serial::StopsToDist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::StopsToDist >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::RouteInfo* Arena::CreateMaybeMessage< ::serial::RouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::RouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::BusIDToRouteInfo* Arena::CreateMaybeMessage< ::serial::BusIDToRouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::BusIDToRouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serial::TransportCatalogue* Arena::CreateMaybeMessage< ::serial::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serial::TransportCatalogue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

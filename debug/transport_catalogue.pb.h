// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace serial {
class BusIDToRouteInfo;
struct BusIDToRouteInfoDefaultTypeInternal;
extern BusIDToRouteInfoDefaultTypeInternal _BusIDToRouteInfo_default_instance_;
class BusIDToRouteInfo_RouteInfoEntry_DoNotUse;
struct BusIDToRouteInfo_RouteInfoEntry_DoNotUseDefaultTypeInternal;
extern BusIDToRouteInfo_RouteInfoEntry_DoNotUseDefaultTypeInternal _BusIDToRouteInfo_RouteInfoEntry_DoNotUse_default_instance_;
class BusList;
struct BusListDefaultTypeInternal;
extern BusListDefaultTypeInternal _BusList_default_instance_;
class BusList_Bus;
struct BusList_BusDefaultTypeInternal;
extern BusList_BusDefaultTypeInternal _BusList_Bus_default_instance_;
class RouteInfo;
struct RouteInfoDefaultTypeInternal;
extern RouteInfoDefaultTypeInternal _RouteInfo_default_instance_;
class StopList;
struct StopListDefaultTypeInternal;
extern StopListDefaultTypeInternal _StopList_default_instance_;
class StopList_Stop;
struct StopList_StopDefaultTypeInternal;
extern StopList_StopDefaultTypeInternal _StopList_Stop_default_instance_;
class StopsToDist;
struct StopsToDistDefaultTypeInternal;
extern StopsToDistDefaultTypeInternal _StopsToDist_default_instance_;
class StopsToDist_StopIdPair;
struct StopsToDist_StopIdPairDefaultTypeInternal;
extern StopsToDist_StopIdPairDefaultTypeInternal _StopsToDist_StopIdPair_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace serial
PROTOBUF_NAMESPACE_OPEN
template<> ::serial::BusIDToRouteInfo* Arena::CreateMaybeMessage<::serial::BusIDToRouteInfo>(Arena*);
template<> ::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::serial::BusIDToRouteInfo_RouteInfoEntry_DoNotUse>(Arena*);
template<> ::serial::BusList* Arena::CreateMaybeMessage<::serial::BusList>(Arena*);
template<> ::serial::BusList_Bus* Arena::CreateMaybeMessage<::serial::BusList_Bus>(Arena*);
template<> ::serial::RouteInfo* Arena::CreateMaybeMessage<::serial::RouteInfo>(Arena*);
template<> ::serial::StopList* Arena::CreateMaybeMessage<::serial::StopList>(Arena*);
template<> ::serial::StopList_Stop* Arena::CreateMaybeMessage<::serial::StopList_Stop>(Arena*);
template<> ::serial::StopsToDist* Arena::CreateMaybeMessage<::serial::StopsToDist>(Arena*);
template<> ::serial::StopsToDist_StopIdPair* Arena::CreateMaybeMessage<::serial::StopsToDist_StopIdPair>(Arena*);
template<> ::serial::TransportCatalogue* Arena::CreateMaybeMessage<::serial::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serial {

// ===================================================================

class StopList_Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.StopList.Stop) */ {
 public:
  inline StopList_Stop() : StopList_Stop(nullptr) {}
  ~StopList_Stop() override;
  explicit constexpr StopList_Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopList_Stop(const StopList_Stop& from);
  StopList_Stop(StopList_Stop&& from) noexcept
    : StopList_Stop() {
    *this = ::std::move(from);
  }

  inline StopList_Stop& operator=(const StopList_Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopList_Stop& operator=(StopList_Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopList_Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopList_Stop* internal_default_instance() {
    return reinterpret_cast<const StopList_Stop*>(
               &_StopList_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopList_Stop& a, StopList_Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(StopList_Stop* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopList_Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopList_Stop* New() const final {
    return new StopList_Stop();
  }

  StopList_Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopList_Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopList_Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopList_Stop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopList_Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.StopList.Stop";
  }
  protected:
  explicit StopList_Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLatFieldNumber = 2,
    kLngFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 3;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // uint32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:serial.StopList.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double lat_;
  double lng_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.StopList) */ {
 public:
  inline StopList() : StopList(nullptr) {}
  ~StopList() override;
  explicit constexpr StopList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopList(const StopList& from);
  StopList(StopList&& from) noexcept
    : StopList() {
    *this = ::std::move(from);
  }

  inline StopList& operator=(const StopList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopList& operator=(StopList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopList* internal_default_instance() {
    return reinterpret_cast<const StopList*>(
               &_StopList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopList& a, StopList& b) {
    a.Swap(&b);
  }
  inline void Swap(StopList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopList* New() const final {
    return new StopList();
  }

  StopList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.StopList";
  }
  protected:
  explicit StopList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StopList_Stop Stop;

  // accessors -------------------------------------------------------

  enum : int {
    kStopStorageFieldNumber = 1,
  };
  // repeated .serial.StopList.Stop stop_storage = 1;
  int stop_storage_size() const;
  private:
  int _internal_stop_storage_size() const;
  public:
  void clear_stop_storage();
  ::serial::StopList_Stop* mutable_stop_storage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopList_Stop >*
      mutable_stop_storage();
  private:
  const ::serial::StopList_Stop& _internal_stop_storage(int index) const;
  ::serial::StopList_Stop* _internal_add_stop_storage();
  public:
  const ::serial::StopList_Stop& stop_storage(int index) const;
  ::serial::StopList_Stop* add_stop_storage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopList_Stop >&
      stop_storage() const;

  // @@protoc_insertion_point(class_scope:serial.StopList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopList_Stop > stop_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusList_Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.BusList.Bus) */ {
 public:
  inline BusList_Bus() : BusList_Bus(nullptr) {}
  ~BusList_Bus() override;
  explicit constexpr BusList_Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusList_Bus(const BusList_Bus& from);
  BusList_Bus(BusList_Bus&& from) noexcept
    : BusList_Bus() {
    *this = ::std::move(from);
  }

  inline BusList_Bus& operator=(const BusList_Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusList_Bus& operator=(BusList_Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusList_Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusList_Bus* internal_default_instance() {
    return reinterpret_cast<const BusList_Bus*>(
               &_BusList_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BusList_Bus& a, BusList_Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(BusList_Bus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusList_Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusList_Bus* New() const final {
    return new BusList_Bus();
  }

  BusList_Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusList_Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusList_Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusList_Bus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusList_Bus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.BusList.Bus";
  }
  protected:
  explicit BusList_Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsIdFieldNumber = 2,
    kNameFieldNumber = 1,
    kIsRoundedFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // repeated uint32 stops_id = 2;
  int stops_id_size() const;
  private:
  int _internal_stops_id_size() const;
  public:
  void clear_stops_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stops_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_stops_id() const;
  void _internal_add_stops_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_stops_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 stops_id(int index) const;
  void set_stops_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_stops_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      stops_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_stops_id();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_rounded = 3;
  void clear_is_rounded();
  bool is_rounded() const;
  void set_is_rounded(bool value);
  private:
  bool _internal_is_rounded() const;
  void _internal_set_is_rounded(bool value);
  public:

  // uint32 id = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:serial.BusList.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > stops_id_;
  mutable std::atomic<int> _stops_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_rounded_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.BusList) */ {
 public:
  inline BusList() : BusList(nullptr) {}
  ~BusList() override;
  explicit constexpr BusList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusList(const BusList& from);
  BusList(BusList&& from) noexcept
    : BusList() {
    *this = ::std::move(from);
  }

  inline BusList& operator=(const BusList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusList& operator=(BusList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusList* internal_default_instance() {
    return reinterpret_cast<const BusList*>(
               &_BusList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BusList& a, BusList& b) {
    a.Swap(&b);
  }
  inline void Swap(BusList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusList* New() const final {
    return new BusList();
  }

  BusList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.BusList";
  }
  protected:
  explicit BusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BusList_Bus Bus;

  // accessors -------------------------------------------------------

  enum : int {
    kBusStorageFieldNumber = 1,
  };
  // repeated .serial.BusList.Bus bus_storage = 1;
  int bus_storage_size() const;
  private:
  int _internal_bus_storage_size() const;
  public:
  void clear_bus_storage();
  ::serial::BusList_Bus* mutable_bus_storage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::BusList_Bus >*
      mutable_bus_storage();
  private:
  const ::serial::BusList_Bus& _internal_bus_storage(int index) const;
  ::serial::BusList_Bus* _internal_add_bus_storage();
  public:
  const ::serial::BusList_Bus& bus_storage(int index) const;
  ::serial::BusList_Bus* add_bus_storage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::BusList_Bus >&
      bus_storage() const;

  // @@protoc_insertion_point(class_scope:serial.BusList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::BusList_Bus > bus_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopsToDist_StopIdPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.StopsToDist.StopIdPair) */ {
 public:
  inline StopsToDist_StopIdPair() : StopsToDist_StopIdPair(nullptr) {}
  ~StopsToDist_StopIdPair() override;
  explicit constexpr StopsToDist_StopIdPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopsToDist_StopIdPair(const StopsToDist_StopIdPair& from);
  StopsToDist_StopIdPair(StopsToDist_StopIdPair&& from) noexcept
    : StopsToDist_StopIdPair() {
    *this = ::std::move(from);
  }

  inline StopsToDist_StopIdPair& operator=(const StopsToDist_StopIdPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopsToDist_StopIdPair& operator=(StopsToDist_StopIdPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopsToDist_StopIdPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopsToDist_StopIdPair* internal_default_instance() {
    return reinterpret_cast<const StopsToDist_StopIdPair*>(
               &_StopsToDist_StopIdPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopsToDist_StopIdPair& a, StopsToDist_StopIdPair& b) {
    a.Swap(&b);
  }
  inline void Swap(StopsToDist_StopIdPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopsToDist_StopIdPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopsToDist_StopIdPair* New() const final {
    return new StopsToDist_StopIdPair();
  }

  StopsToDist_StopIdPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopsToDist_StopIdPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopsToDist_StopIdPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopsToDist_StopIdPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopsToDist_StopIdPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.StopsToDist.StopIdPair";
  }
  protected:
  explicit StopsToDist_StopIdPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstStopFieldNumber = 1,
    kLastStopFieldNumber = 2,
  };
  // uint32 first_stop = 1;
  void clear_first_stop();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_stop() const;
  void set_first_stop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_stop() const;
  void _internal_set_first_stop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_stop = 2;
  void clear_last_stop();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_stop() const;
  void set_last_stop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_stop() const;
  void _internal_set_last_stop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:serial.StopsToDist.StopIdPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_stop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopsToDist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.StopsToDist) */ {
 public:
  inline StopsToDist() : StopsToDist(nullptr) {}
  ~StopsToDist() override;
  explicit constexpr StopsToDist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopsToDist(const StopsToDist& from);
  StopsToDist(StopsToDist&& from) noexcept
    : StopsToDist() {
    *this = ::std::move(from);
  }

  inline StopsToDist& operator=(const StopsToDist& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopsToDist& operator=(StopsToDist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopsToDist& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopsToDist* internal_default_instance() {
    return reinterpret_cast<const StopsToDist*>(
               &_StopsToDist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopsToDist& a, StopsToDist& b) {
    a.Swap(&b);
  }
  inline void Swap(StopsToDist* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopsToDist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopsToDist* New() const final {
    return new StopsToDist();
  }

  StopsToDist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopsToDist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopsToDist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopsToDist& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopsToDist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.StopsToDist";
  }
  protected:
  explicit StopsToDist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StopsToDist_StopIdPair StopIdPair;

  // accessors -------------------------------------------------------

  enum : int {
    kStopsBetweenFieldNumber = 1,
    kDistFieldNumber = 2,
  };
  // .serial.StopsToDist.StopIdPair stops_between = 1;
  bool has_stops_between() const;
  private:
  bool _internal_has_stops_between() const;
  public:
  void clear_stops_between();
  const ::serial::StopsToDist_StopIdPair& stops_between() const;
  PROTOBUF_MUST_USE_RESULT ::serial::StopsToDist_StopIdPair* release_stops_between();
  ::serial::StopsToDist_StopIdPair* mutable_stops_between();
  void set_allocated_stops_between(::serial::StopsToDist_StopIdPair* stops_between);
  private:
  const ::serial::StopsToDist_StopIdPair& _internal_stops_between() const;
  ::serial::StopsToDist_StopIdPair* _internal_mutable_stops_between();
  public:
  void unsafe_arena_set_allocated_stops_between(
      ::serial::StopsToDist_StopIdPair* stops_between);
  ::serial::StopsToDist_StopIdPair* unsafe_arena_release_stops_between();

  // double dist = 2;
  void clear_dist();
  double dist() const;
  void set_dist(double value);
  private:
  double _internal_dist() const;
  void _internal_set_dist(double value);
  public:

  // @@protoc_insertion_point(class_scope:serial.StopsToDist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::serial::StopsToDist_StopIdPair* stops_between_;
  double dist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RouteInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.RouteInfo) */ {
 public:
  inline RouteInfo() : RouteInfo(nullptr) {}
  ~RouteInfo() override;
  explicit constexpr RouteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInfo(const RouteInfo& from);
  RouteInfo(RouteInfo&& from) noexcept
    : RouteInfo() {
    *this = ::std::move(from);
  }

  inline RouteInfo& operator=(const RouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInfo& operator=(RouteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteInfo* internal_default_instance() {
    return reinterpret_cast<const RouteInfo*>(
               &_RouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RouteInfo& a, RouteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInfo* New() const final {
    return new RouteInfo();
  }

  RouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RouteInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.RouteInfo";
  }
  protected:
  explicit RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteLenghtFieldNumber = 1,
    kCurvutureFieldNumber = 2,
  };
  // double route_lenght = 1;
  void clear_route_lenght();
  double route_lenght() const;
  void set_route_lenght(double value);
  private:
  double _internal_route_lenght() const;
  void _internal_set_route_lenght(double value);
  public:

  // double curvuture = 2;
  void clear_curvuture();
  double curvuture() const;
  void set_curvuture(double value);
  private:
  double _internal_curvuture() const;
  void _internal_set_curvuture(double value);
  public:

  // @@protoc_insertion_point(class_scope:serial.RouteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double route_lenght_;
  double curvuture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusIDToRouteInfo_RouteInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BusIDToRouteInfo_RouteInfoEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BusIDToRouteInfo_RouteInfoEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  BusIDToRouteInfo_RouteInfoEntry_DoNotUse();
  explicit constexpr BusIDToRouteInfo_RouteInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BusIDToRouteInfo_RouteInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BusIDToRouteInfo_RouteInfoEntry_DoNotUse& other);
  static const BusIDToRouteInfo_RouteInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BusIDToRouteInfo_RouteInfoEntry_DoNotUse*>(&_BusIDToRouteInfo_RouteInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BusIDToRouteInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.BusIDToRouteInfo) */ {
 public:
  inline BusIDToRouteInfo() : BusIDToRouteInfo(nullptr) {}
  ~BusIDToRouteInfo() override;
  explicit constexpr BusIDToRouteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusIDToRouteInfo(const BusIDToRouteInfo& from);
  BusIDToRouteInfo(BusIDToRouteInfo&& from) noexcept
    : BusIDToRouteInfo() {
    *this = ::std::move(from);
  }

  inline BusIDToRouteInfo& operator=(const BusIDToRouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusIDToRouteInfo& operator=(BusIDToRouteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusIDToRouteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusIDToRouteInfo* internal_default_instance() {
    return reinterpret_cast<const BusIDToRouteInfo*>(
               &_BusIDToRouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BusIDToRouteInfo& a, BusIDToRouteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BusIDToRouteInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusIDToRouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusIDToRouteInfo* New() const final {
    return new BusIDToRouteInfo();
  }

  BusIDToRouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusIDToRouteInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusIDToRouteInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusIDToRouteInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusIDToRouteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.BusIDToRouteInfo";
  }
  protected:
  explicit BusIDToRouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRouteInfoFieldNumber = 1,
  };
  // map<uint32, .serial.RouteInfo> route_info = 1;
  int route_info_size() const;
  private:
  int _internal_route_info_size() const;
  public:
  void clear_route_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >&
      _internal_route_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >*
      _internal_mutable_route_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >&
      route_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >*
      mutable_route_info();

  // @@protoc_insertion_point(class_scope:serial.BusIDToRouteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BusIDToRouteInfo_RouteInfoEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> route_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit constexpr TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalogue* New() const final {
    return new TransportCatalogue();
  }

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportCatalogue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsToDistFieldNumber = 4,
    kStopStorageFieldNumber = 1,
    kBusStorageFieldNumber = 2,
    kRouteInfoFieldNumber = 5,
    kRenderSettingsFieldNumber = 6,
    kTransportRouterFieldNumber = 7,
  };
  // repeated .serial.StopsToDist stops_to_dist = 4;
  int stops_to_dist_size() const;
  private:
  int _internal_stops_to_dist_size() const;
  public:
  void clear_stops_to_dist();
  ::serial::StopsToDist* mutable_stops_to_dist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopsToDist >*
      mutable_stops_to_dist();
  private:
  const ::serial::StopsToDist& _internal_stops_to_dist(int index) const;
  ::serial::StopsToDist* _internal_add_stops_to_dist();
  public:
  const ::serial::StopsToDist& stops_to_dist(int index) const;
  ::serial::StopsToDist* add_stops_to_dist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopsToDist >&
      stops_to_dist() const;

  // .serial.StopList stop_storage = 1;
  bool has_stop_storage() const;
  private:
  bool _internal_has_stop_storage() const;
  public:
  void clear_stop_storage();
  const ::serial::StopList& stop_storage() const;
  PROTOBUF_MUST_USE_RESULT ::serial::StopList* release_stop_storage();
  ::serial::StopList* mutable_stop_storage();
  void set_allocated_stop_storage(::serial::StopList* stop_storage);
  private:
  const ::serial::StopList& _internal_stop_storage() const;
  ::serial::StopList* _internal_mutable_stop_storage();
  public:
  void unsafe_arena_set_allocated_stop_storage(
      ::serial::StopList* stop_storage);
  ::serial::StopList* unsafe_arena_release_stop_storage();

  // .serial.BusList bus_storage = 2;
  bool has_bus_storage() const;
  private:
  bool _internal_has_bus_storage() const;
  public:
  void clear_bus_storage();
  const ::serial::BusList& bus_storage() const;
  PROTOBUF_MUST_USE_RESULT ::serial::BusList* release_bus_storage();
  ::serial::BusList* mutable_bus_storage();
  void set_allocated_bus_storage(::serial::BusList* bus_storage);
  private:
  const ::serial::BusList& _internal_bus_storage() const;
  ::serial::BusList* _internal_mutable_bus_storage();
  public:
  void unsafe_arena_set_allocated_bus_storage(
      ::serial::BusList* bus_storage);
  ::serial::BusList* unsafe_arena_release_bus_storage();

  // .serial.BusIDToRouteInfo route_info = 5;
  bool has_route_info() const;
  private:
  bool _internal_has_route_info() const;
  public:
  void clear_route_info();
  const ::serial::BusIDToRouteInfo& route_info() const;
  PROTOBUF_MUST_USE_RESULT ::serial::BusIDToRouteInfo* release_route_info();
  ::serial::BusIDToRouteInfo* mutable_route_info();
  void set_allocated_route_info(::serial::BusIDToRouteInfo* route_info);
  private:
  const ::serial::BusIDToRouteInfo& _internal_route_info() const;
  ::serial::BusIDToRouteInfo* _internal_mutable_route_info();
  public:
  void unsafe_arena_set_allocated_route_info(
      ::serial::BusIDToRouteInfo* route_info);
  ::serial::BusIDToRouteInfo* unsafe_arena_release_route_info();

  // .serial.RenderSettings render_settings = 6;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::serial::RenderSettings& render_settings() const;
  PROTOBUF_MUST_USE_RESULT ::serial::RenderSettings* release_render_settings();
  ::serial::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::serial::RenderSettings* render_settings);
  private:
  const ::serial::RenderSettings& _internal_render_settings() const;
  ::serial::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::serial::RenderSettings* render_settings);
  ::serial::RenderSettings* unsafe_arena_release_render_settings();

  // .serial.TransportRouter transport_router = 7;
  bool has_transport_router() const;
  private:
  bool _internal_has_transport_router() const;
  public:
  void clear_transport_router();
  const ::serial::TransportRouter& transport_router() const;
  PROTOBUF_MUST_USE_RESULT ::serial::TransportRouter* release_transport_router();
  ::serial::TransportRouter* mutable_transport_router();
  void set_allocated_transport_router(::serial::TransportRouter* transport_router);
  private:
  const ::serial::TransportRouter& _internal_transport_router() const;
  ::serial::TransportRouter* _internal_mutable_transport_router();
  public:
  void unsafe_arena_set_allocated_transport_router(
      ::serial::TransportRouter* transport_router);
  ::serial::TransportRouter* unsafe_arena_release_transport_router();

  // @@protoc_insertion_point(class_scope:serial.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopsToDist > stops_to_dist_;
  ::serial::StopList* stop_storage_;
  ::serial::BusList* bus_storage_;
  ::serial::BusIDToRouteInfo* route_info_;
  ::serial::RenderSettings* render_settings_;
  ::serial::TransportRouter* transport_router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopList_Stop

// string name = 1;
inline void StopList_Stop::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopList_Stop::name() const {
  // @@protoc_insertion_point(field_get:serial.StopList.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopList_Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serial.StopList.Stop.name)
}
inline std::string* StopList_Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serial.StopList.Stop.name)
  return _s;
}
inline const std::string& StopList_Stop::_internal_name() const {
  return name_.Get();
}
inline void StopList_Stop::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopList_Stop::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopList_Stop::release_name() {
  // @@protoc_insertion_point(field_release:serial.StopList.Stop.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopList_Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:serial.StopList.Stop.name)
}

// double lat = 2;
inline void StopList_Stop::clear_lat() {
  lat_ = 0;
}
inline double StopList_Stop::_internal_lat() const {
  return lat_;
}
inline double StopList_Stop::lat() const {
  // @@protoc_insertion_point(field_get:serial.StopList.Stop.lat)
  return _internal_lat();
}
inline void StopList_Stop::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void StopList_Stop::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:serial.StopList.Stop.lat)
}

// double lng = 3;
inline void StopList_Stop::clear_lng() {
  lng_ = 0;
}
inline double StopList_Stop::_internal_lng() const {
  return lng_;
}
inline double StopList_Stop::lng() const {
  // @@protoc_insertion_point(field_get:serial.StopList.Stop.lng)
  return _internal_lng();
}
inline void StopList_Stop::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void StopList_Stop::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:serial.StopList.Stop.lng)
}

// uint32 id = 4;
inline void StopList_Stop::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopList_Stop::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopList_Stop::id() const {
  // @@protoc_insertion_point(field_get:serial.StopList.Stop.id)
  return _internal_id();
}
inline void StopList_Stop::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StopList_Stop::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serial.StopList.Stop.id)
}

// -------------------------------------------------------------------

// StopList

// repeated .serial.StopList.Stop stop_storage = 1;
inline int StopList::_internal_stop_storage_size() const {
  return stop_storage_.size();
}
inline int StopList::stop_storage_size() const {
  return _internal_stop_storage_size();
}
inline void StopList::clear_stop_storage() {
  stop_storage_.Clear();
}
inline ::serial::StopList_Stop* StopList::mutable_stop_storage(int index) {
  // @@protoc_insertion_point(field_mutable:serial.StopList.stop_storage)
  return stop_storage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopList_Stop >*
StopList::mutable_stop_storage() {
  // @@protoc_insertion_point(field_mutable_list:serial.StopList.stop_storage)
  return &stop_storage_;
}
inline const ::serial::StopList_Stop& StopList::_internal_stop_storage(int index) const {
  return stop_storage_.Get(index);
}
inline const ::serial::StopList_Stop& StopList::stop_storage(int index) const {
  // @@protoc_insertion_point(field_get:serial.StopList.stop_storage)
  return _internal_stop_storage(index);
}
inline ::serial::StopList_Stop* StopList::_internal_add_stop_storage() {
  return stop_storage_.Add();
}
inline ::serial::StopList_Stop* StopList::add_stop_storage() {
  ::serial::StopList_Stop* _add = _internal_add_stop_storage();
  // @@protoc_insertion_point(field_add:serial.StopList.stop_storage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopList_Stop >&
StopList::stop_storage() const {
  // @@protoc_insertion_point(field_list:serial.StopList.stop_storage)
  return stop_storage_;
}

// -------------------------------------------------------------------

// BusList_Bus

// string name = 1;
inline void BusList_Bus::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BusList_Bus::name() const {
  // @@protoc_insertion_point(field_get:serial.BusList.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusList_Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serial.BusList.Bus.name)
}
inline std::string* BusList_Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serial.BusList.Bus.name)
  return _s;
}
inline const std::string& BusList_Bus::_internal_name() const {
  return name_.Get();
}
inline void BusList_Bus::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BusList_Bus::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BusList_Bus::release_name() {
  // @@protoc_insertion_point(field_release:serial.BusList.Bus.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BusList_Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:serial.BusList.Bus.name)
}

// repeated uint32 stops_id = 2;
inline int BusList_Bus::_internal_stops_id_size() const {
  return stops_id_.size();
}
inline int BusList_Bus::stops_id_size() const {
  return _internal_stops_id_size();
}
inline void BusList_Bus::clear_stops_id() {
  stops_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusList_Bus::_internal_stops_id(int index) const {
  return stops_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusList_Bus::stops_id(int index) const {
  // @@protoc_insertion_point(field_get:serial.BusList.Bus.stops_id)
  return _internal_stops_id(index);
}
inline void BusList_Bus::set_stops_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stops_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:serial.BusList.Bus.stops_id)
}
inline void BusList_Bus::_internal_add_stops_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stops_id_.Add(value);
}
inline void BusList_Bus::add_stops_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_stops_id(value);
  // @@protoc_insertion_point(field_add:serial.BusList.Bus.stops_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BusList_Bus::_internal_stops_id() const {
  return stops_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BusList_Bus::stops_id() const {
  // @@protoc_insertion_point(field_list:serial.BusList.Bus.stops_id)
  return _internal_stops_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BusList_Bus::_internal_mutable_stops_id() {
  return &stops_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BusList_Bus::mutable_stops_id() {
  // @@protoc_insertion_point(field_mutable_list:serial.BusList.Bus.stops_id)
  return _internal_mutable_stops_id();
}

// bool is_rounded = 3;
inline void BusList_Bus::clear_is_rounded() {
  is_rounded_ = false;
}
inline bool BusList_Bus::_internal_is_rounded() const {
  return is_rounded_;
}
inline bool BusList_Bus::is_rounded() const {
  // @@protoc_insertion_point(field_get:serial.BusList.Bus.is_rounded)
  return _internal_is_rounded();
}
inline void BusList_Bus::_internal_set_is_rounded(bool value) {
  
  is_rounded_ = value;
}
inline void BusList_Bus::set_is_rounded(bool value) {
  _internal_set_is_rounded(value);
  // @@protoc_insertion_point(field_set:serial.BusList.Bus.is_rounded)
}

// uint32 id = 4;
inline void BusList_Bus::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusList_Bus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusList_Bus::id() const {
  // @@protoc_insertion_point(field_get:serial.BusList.Bus.id)
  return _internal_id();
}
inline void BusList_Bus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void BusList_Bus::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serial.BusList.Bus.id)
}

// -------------------------------------------------------------------

// BusList

// repeated .serial.BusList.Bus bus_storage = 1;
inline int BusList::_internal_bus_storage_size() const {
  return bus_storage_.size();
}
inline int BusList::bus_storage_size() const {
  return _internal_bus_storage_size();
}
inline void BusList::clear_bus_storage() {
  bus_storage_.Clear();
}
inline ::serial::BusList_Bus* BusList::mutable_bus_storage(int index) {
  // @@protoc_insertion_point(field_mutable:serial.BusList.bus_storage)
  return bus_storage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::BusList_Bus >*
BusList::mutable_bus_storage() {
  // @@protoc_insertion_point(field_mutable_list:serial.BusList.bus_storage)
  return &bus_storage_;
}
inline const ::serial::BusList_Bus& BusList::_internal_bus_storage(int index) const {
  return bus_storage_.Get(index);
}
inline const ::serial::BusList_Bus& BusList::bus_storage(int index) const {
  // @@protoc_insertion_point(field_get:serial.BusList.bus_storage)
  return _internal_bus_storage(index);
}
inline ::serial::BusList_Bus* BusList::_internal_add_bus_storage() {
  return bus_storage_.Add();
}
inline ::serial::BusList_Bus* BusList::add_bus_storage() {
  ::serial::BusList_Bus* _add = _internal_add_bus_storage();
  // @@protoc_insertion_point(field_add:serial.BusList.bus_storage)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::BusList_Bus >&
BusList::bus_storage() const {
  // @@protoc_insertion_point(field_list:serial.BusList.bus_storage)
  return bus_storage_;
}

// -------------------------------------------------------------------

// StopsToDist_StopIdPair

// uint32 first_stop = 1;
inline void StopsToDist_StopIdPair::clear_first_stop() {
  first_stop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToDist_StopIdPair::_internal_first_stop() const {
  return first_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToDist_StopIdPair::first_stop() const {
  // @@protoc_insertion_point(field_get:serial.StopsToDist.StopIdPair.first_stop)
  return _internal_first_stop();
}
inline void StopsToDist_StopIdPair::_internal_set_first_stop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_stop_ = value;
}
inline void StopsToDist_StopIdPair::set_first_stop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_stop(value);
  // @@protoc_insertion_point(field_set:serial.StopsToDist.StopIdPair.first_stop)
}

// uint32 last_stop = 2;
inline void StopsToDist_StopIdPair::clear_last_stop() {
  last_stop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToDist_StopIdPair::_internal_last_stop() const {
  return last_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToDist_StopIdPair::last_stop() const {
  // @@protoc_insertion_point(field_get:serial.StopsToDist.StopIdPair.last_stop)
  return _internal_last_stop();
}
inline void StopsToDist_StopIdPair::_internal_set_last_stop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_stop_ = value;
}
inline void StopsToDist_StopIdPair::set_last_stop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_stop(value);
  // @@protoc_insertion_point(field_set:serial.StopsToDist.StopIdPair.last_stop)
}

// -------------------------------------------------------------------

// StopsToDist

// .serial.StopsToDist.StopIdPair stops_between = 1;
inline bool StopsToDist::_internal_has_stops_between() const {
  return this != internal_default_instance() && stops_between_ != nullptr;
}
inline bool StopsToDist::has_stops_between() const {
  return _internal_has_stops_between();
}
inline void StopsToDist::clear_stops_between() {
  if (GetArenaForAllocation() == nullptr && stops_between_ != nullptr) {
    delete stops_between_;
  }
  stops_between_ = nullptr;
}
inline const ::serial::StopsToDist_StopIdPair& StopsToDist::_internal_stops_between() const {
  const ::serial::StopsToDist_StopIdPair* p = stops_between_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::StopsToDist_StopIdPair&>(
      ::serial::_StopsToDist_StopIdPair_default_instance_);
}
inline const ::serial::StopsToDist_StopIdPair& StopsToDist::stops_between() const {
  // @@protoc_insertion_point(field_get:serial.StopsToDist.stops_between)
  return _internal_stops_between();
}
inline void StopsToDist::unsafe_arena_set_allocated_stops_between(
    ::serial::StopsToDist_StopIdPair* stops_between) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stops_between_);
  }
  stops_between_ = stops_between;
  if (stops_between) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.StopsToDist.stops_between)
}
inline ::serial::StopsToDist_StopIdPair* StopsToDist::release_stops_between() {
  
  ::serial::StopsToDist_StopIdPair* temp = stops_between_;
  stops_between_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::StopsToDist_StopIdPair* StopsToDist::unsafe_arena_release_stops_between() {
  // @@protoc_insertion_point(field_release:serial.StopsToDist.stops_between)
  
  ::serial::StopsToDist_StopIdPair* temp = stops_between_;
  stops_between_ = nullptr;
  return temp;
}
inline ::serial::StopsToDist_StopIdPair* StopsToDist::_internal_mutable_stops_between() {
  
  if (stops_between_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::StopsToDist_StopIdPair>(GetArenaForAllocation());
    stops_between_ = p;
  }
  return stops_between_;
}
inline ::serial::StopsToDist_StopIdPair* StopsToDist::mutable_stops_between() {
  ::serial::StopsToDist_StopIdPair* _msg = _internal_mutable_stops_between();
  // @@protoc_insertion_point(field_mutable:serial.StopsToDist.stops_between)
  return _msg;
}
inline void StopsToDist::set_allocated_stops_between(::serial::StopsToDist_StopIdPair* stops_between) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stops_between_;
  }
  if (stops_between) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::StopsToDist_StopIdPair>::GetOwningArena(stops_between);
    if (message_arena != submessage_arena) {
      stops_between = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stops_between, submessage_arena);
    }
    
  } else {
    
  }
  stops_between_ = stops_between;
  // @@protoc_insertion_point(field_set_allocated:serial.StopsToDist.stops_between)
}

// double dist = 2;
inline void StopsToDist::clear_dist() {
  dist_ = 0;
}
inline double StopsToDist::_internal_dist() const {
  return dist_;
}
inline double StopsToDist::dist() const {
  // @@protoc_insertion_point(field_get:serial.StopsToDist.dist)
  return _internal_dist();
}
inline void StopsToDist::_internal_set_dist(double value) {
  
  dist_ = value;
}
inline void StopsToDist::set_dist(double value) {
  _internal_set_dist(value);
  // @@protoc_insertion_point(field_set:serial.StopsToDist.dist)
}

// -------------------------------------------------------------------

// RouteInfo

// double route_lenght = 1;
inline void RouteInfo::clear_route_lenght() {
  route_lenght_ = 0;
}
inline double RouteInfo::_internal_route_lenght() const {
  return route_lenght_;
}
inline double RouteInfo::route_lenght() const {
  // @@protoc_insertion_point(field_get:serial.RouteInfo.route_lenght)
  return _internal_route_lenght();
}
inline void RouteInfo::_internal_set_route_lenght(double value) {
  
  route_lenght_ = value;
}
inline void RouteInfo::set_route_lenght(double value) {
  _internal_set_route_lenght(value);
  // @@protoc_insertion_point(field_set:serial.RouteInfo.route_lenght)
}

// double curvuture = 2;
inline void RouteInfo::clear_curvuture() {
  curvuture_ = 0;
}
inline double RouteInfo::_internal_curvuture() const {
  return curvuture_;
}
inline double RouteInfo::curvuture() const {
  // @@protoc_insertion_point(field_get:serial.RouteInfo.curvuture)
  return _internal_curvuture();
}
inline void RouteInfo::_internal_set_curvuture(double value) {
  
  curvuture_ = value;
}
inline void RouteInfo::set_curvuture(double value) {
  _internal_set_curvuture(value);
  // @@protoc_insertion_point(field_set:serial.RouteInfo.curvuture)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BusIDToRouteInfo

// map<uint32, .serial.RouteInfo> route_info = 1;
inline int BusIDToRouteInfo::_internal_route_info_size() const {
  return route_info_.size();
}
inline int BusIDToRouteInfo::route_info_size() const {
  return _internal_route_info_size();
}
inline void BusIDToRouteInfo::clear_route_info() {
  route_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >&
BusIDToRouteInfo::_internal_route_info() const {
  return route_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >&
BusIDToRouteInfo::route_info() const {
  // @@protoc_insertion_point(field_map:serial.BusIDToRouteInfo.route_info)
  return _internal_route_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >*
BusIDToRouteInfo::_internal_mutable_route_info() {
  return route_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::serial::RouteInfo >*
BusIDToRouteInfo::mutable_route_info() {
  // @@protoc_insertion_point(field_mutable_map:serial.BusIDToRouteInfo.route_info)
  return _internal_mutable_route_info();
}

// -------------------------------------------------------------------

// TransportCatalogue

// .serial.StopList stop_storage = 1;
inline bool TransportCatalogue::_internal_has_stop_storage() const {
  return this != internal_default_instance() && stop_storage_ != nullptr;
}
inline bool TransportCatalogue::has_stop_storage() const {
  return _internal_has_stop_storage();
}
inline void TransportCatalogue::clear_stop_storage() {
  if (GetArenaForAllocation() == nullptr && stop_storage_ != nullptr) {
    delete stop_storage_;
  }
  stop_storage_ = nullptr;
}
inline const ::serial::StopList& TransportCatalogue::_internal_stop_storage() const {
  const ::serial::StopList* p = stop_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::StopList&>(
      ::serial::_StopList_default_instance_);
}
inline const ::serial::StopList& TransportCatalogue::stop_storage() const {
  // @@protoc_insertion_point(field_get:serial.TransportCatalogue.stop_storage)
  return _internal_stop_storage();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_stop_storage(
    ::serial::StopList* stop_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_storage_);
  }
  stop_storage_ = stop_storage;
  if (stop_storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.TransportCatalogue.stop_storage)
}
inline ::serial::StopList* TransportCatalogue::release_stop_storage() {
  
  ::serial::StopList* temp = stop_storage_;
  stop_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::StopList* TransportCatalogue::unsafe_arena_release_stop_storage() {
  // @@protoc_insertion_point(field_release:serial.TransportCatalogue.stop_storage)
  
  ::serial::StopList* temp = stop_storage_;
  stop_storage_ = nullptr;
  return temp;
}
inline ::serial::StopList* TransportCatalogue::_internal_mutable_stop_storage() {
  
  if (stop_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::StopList>(GetArenaForAllocation());
    stop_storage_ = p;
  }
  return stop_storage_;
}
inline ::serial::StopList* TransportCatalogue::mutable_stop_storage() {
  ::serial::StopList* _msg = _internal_mutable_stop_storage();
  // @@protoc_insertion_point(field_mutable:serial.TransportCatalogue.stop_storage)
  return _msg;
}
inline void TransportCatalogue::set_allocated_stop_storage(::serial::StopList* stop_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stop_storage_;
  }
  if (stop_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::StopList>::GetOwningArena(stop_storage);
    if (message_arena != submessage_arena) {
      stop_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_storage, submessage_arena);
    }
    
  } else {
    
  }
  stop_storage_ = stop_storage;
  // @@protoc_insertion_point(field_set_allocated:serial.TransportCatalogue.stop_storage)
}

// .serial.BusList bus_storage = 2;
inline bool TransportCatalogue::_internal_has_bus_storage() const {
  return this != internal_default_instance() && bus_storage_ != nullptr;
}
inline bool TransportCatalogue::has_bus_storage() const {
  return _internal_has_bus_storage();
}
inline void TransportCatalogue::clear_bus_storage() {
  if (GetArenaForAllocation() == nullptr && bus_storage_ != nullptr) {
    delete bus_storage_;
  }
  bus_storage_ = nullptr;
}
inline const ::serial::BusList& TransportCatalogue::_internal_bus_storage() const {
  const ::serial::BusList* p = bus_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::BusList&>(
      ::serial::_BusList_default_instance_);
}
inline const ::serial::BusList& TransportCatalogue::bus_storage() const {
  // @@protoc_insertion_point(field_get:serial.TransportCatalogue.bus_storage)
  return _internal_bus_storage();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_bus_storage(
    ::serial::BusList* bus_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_storage_);
  }
  bus_storage_ = bus_storage;
  if (bus_storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.TransportCatalogue.bus_storage)
}
inline ::serial::BusList* TransportCatalogue::release_bus_storage() {
  
  ::serial::BusList* temp = bus_storage_;
  bus_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::BusList* TransportCatalogue::unsafe_arena_release_bus_storage() {
  // @@protoc_insertion_point(field_release:serial.TransportCatalogue.bus_storage)
  
  ::serial::BusList* temp = bus_storage_;
  bus_storage_ = nullptr;
  return temp;
}
inline ::serial::BusList* TransportCatalogue::_internal_mutable_bus_storage() {
  
  if (bus_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::BusList>(GetArenaForAllocation());
    bus_storage_ = p;
  }
  return bus_storage_;
}
inline ::serial::BusList* TransportCatalogue::mutable_bus_storage() {
  ::serial::BusList* _msg = _internal_mutable_bus_storage();
  // @@protoc_insertion_point(field_mutable:serial.TransportCatalogue.bus_storage)
  return _msg;
}
inline void TransportCatalogue::set_allocated_bus_storage(::serial::BusList* bus_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bus_storage_;
  }
  if (bus_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::BusList>::GetOwningArena(bus_storage);
    if (message_arena != submessage_arena) {
      bus_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_storage, submessage_arena);
    }
    
  } else {
    
  }
  bus_storage_ = bus_storage;
  // @@protoc_insertion_point(field_set_allocated:serial.TransportCatalogue.bus_storage)
}

// repeated .serial.StopsToDist stops_to_dist = 4;
inline int TransportCatalogue::_internal_stops_to_dist_size() const {
  return stops_to_dist_.size();
}
inline int TransportCatalogue::stops_to_dist_size() const {
  return _internal_stops_to_dist_size();
}
inline void TransportCatalogue::clear_stops_to_dist() {
  stops_to_dist_.Clear();
}
inline ::serial::StopsToDist* TransportCatalogue::mutable_stops_to_dist(int index) {
  // @@protoc_insertion_point(field_mutable:serial.TransportCatalogue.stops_to_dist)
  return stops_to_dist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopsToDist >*
TransportCatalogue::mutable_stops_to_dist() {
  // @@protoc_insertion_point(field_mutable_list:serial.TransportCatalogue.stops_to_dist)
  return &stops_to_dist_;
}
inline const ::serial::StopsToDist& TransportCatalogue::_internal_stops_to_dist(int index) const {
  return stops_to_dist_.Get(index);
}
inline const ::serial::StopsToDist& TransportCatalogue::stops_to_dist(int index) const {
  // @@protoc_insertion_point(field_get:serial.TransportCatalogue.stops_to_dist)
  return _internal_stops_to_dist(index);
}
inline ::serial::StopsToDist* TransportCatalogue::_internal_add_stops_to_dist() {
  return stops_to_dist_.Add();
}
inline ::serial::StopsToDist* TransportCatalogue::add_stops_to_dist() {
  ::serial::StopsToDist* _add = _internal_add_stops_to_dist();
  // @@protoc_insertion_point(field_add:serial.TransportCatalogue.stops_to_dist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serial::StopsToDist >&
TransportCatalogue::stops_to_dist() const {
  // @@protoc_insertion_point(field_list:serial.TransportCatalogue.stops_to_dist)
  return stops_to_dist_;
}

// .serial.BusIDToRouteInfo route_info = 5;
inline bool TransportCatalogue::_internal_has_route_info() const {
  return this != internal_default_instance() && route_info_ != nullptr;
}
inline bool TransportCatalogue::has_route_info() const {
  return _internal_has_route_info();
}
inline void TransportCatalogue::clear_route_info() {
  if (GetArenaForAllocation() == nullptr && route_info_ != nullptr) {
    delete route_info_;
  }
  route_info_ = nullptr;
}
inline const ::serial::BusIDToRouteInfo& TransportCatalogue::_internal_route_info() const {
  const ::serial::BusIDToRouteInfo* p = route_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::BusIDToRouteInfo&>(
      ::serial::_BusIDToRouteInfo_default_instance_);
}
inline const ::serial::BusIDToRouteInfo& TransportCatalogue::route_info() const {
  // @@protoc_insertion_point(field_get:serial.TransportCatalogue.route_info)
  return _internal_route_info();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_route_info(
    ::serial::BusIDToRouteInfo* route_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_info_);
  }
  route_info_ = route_info;
  if (route_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.TransportCatalogue.route_info)
}
inline ::serial::BusIDToRouteInfo* TransportCatalogue::release_route_info() {
  
  ::serial::BusIDToRouteInfo* temp = route_info_;
  route_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::BusIDToRouteInfo* TransportCatalogue::unsafe_arena_release_route_info() {
  // @@protoc_insertion_point(field_release:serial.TransportCatalogue.route_info)
  
  ::serial::BusIDToRouteInfo* temp = route_info_;
  route_info_ = nullptr;
  return temp;
}
inline ::serial::BusIDToRouteInfo* TransportCatalogue::_internal_mutable_route_info() {
  
  if (route_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::BusIDToRouteInfo>(GetArenaForAllocation());
    route_info_ = p;
  }
  return route_info_;
}
inline ::serial::BusIDToRouteInfo* TransportCatalogue::mutable_route_info() {
  ::serial::BusIDToRouteInfo* _msg = _internal_mutable_route_info();
  // @@protoc_insertion_point(field_mutable:serial.TransportCatalogue.route_info)
  return _msg;
}
inline void TransportCatalogue::set_allocated_route_info(::serial::BusIDToRouteInfo* route_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete route_info_;
  }
  if (route_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::BusIDToRouteInfo>::GetOwningArena(route_info);
    if (message_arena != submessage_arena) {
      route_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_info, submessage_arena);
    }
    
  } else {
    
  }
  route_info_ = route_info;
  // @@protoc_insertion_point(field_set_allocated:serial.TransportCatalogue.route_info)
}

// .serial.RenderSettings render_settings = 6;
inline bool TransportCatalogue::_internal_has_render_settings() const {
  return this != internal_default_instance() && render_settings_ != nullptr;
}
inline bool TransportCatalogue::has_render_settings() const {
  return _internal_has_render_settings();
}
inline const ::serial::RenderSettings& TransportCatalogue::_internal_render_settings() const {
  const ::serial::RenderSettings* p = render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::RenderSettings&>(
      ::serial::_RenderSettings_default_instance_);
}
inline const ::serial::RenderSettings& TransportCatalogue::render_settings() const {
  // @@protoc_insertion_point(field_get:serial.TransportCatalogue.render_settings)
  return _internal_render_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_settings(
    ::serial::RenderSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.TransportCatalogue.render_settings)
}
inline ::serial::RenderSettings* TransportCatalogue::release_render_settings() {
  
  ::serial::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::RenderSettings* TransportCatalogue::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:serial.TransportCatalogue.render_settings)
  
  ::serial::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
  return temp;
}
inline ::serial::RenderSettings* TransportCatalogue::_internal_mutable_render_settings() {
  
  if (render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::RenderSettings>(GetArenaForAllocation());
    render_settings_ = p;
  }
  return render_settings_;
}
inline ::serial::RenderSettings* TransportCatalogue::mutable_render_settings() {
  ::serial::RenderSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:serial.TransportCatalogue.render_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_render_settings(::serial::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings));
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:serial.TransportCatalogue.render_settings)
}

// .serial.TransportRouter transport_router = 7;
inline bool TransportCatalogue::_internal_has_transport_router() const {
  return this != internal_default_instance() && transport_router_ != nullptr;
}
inline bool TransportCatalogue::has_transport_router() const {
  return _internal_has_transport_router();
}
inline const ::serial::TransportRouter& TransportCatalogue::_internal_transport_router() const {
  const ::serial::TransportRouter* p = transport_router_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::TransportRouter&>(
      ::serial::_TransportRouter_default_instance_);
}
inline const ::serial::TransportRouter& TransportCatalogue::transport_router() const {
  // @@protoc_insertion_point(field_get:serial.TransportCatalogue.transport_router)
  return _internal_transport_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_transport_router(
    ::serial::TransportRouter* transport_router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router_);
  }
  transport_router_ = transport_router;
  if (transport_router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.TransportCatalogue.transport_router)
}
inline ::serial::TransportRouter* TransportCatalogue::release_transport_router() {
  
  ::serial::TransportRouter* temp = transport_router_;
  transport_router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::TransportRouter* TransportCatalogue::unsafe_arena_release_transport_router() {
  // @@protoc_insertion_point(field_release:serial.TransportCatalogue.transport_router)
  
  ::serial::TransportRouter* temp = transport_router_;
  transport_router_ = nullptr;
  return temp;
}
inline ::serial::TransportRouter* TransportCatalogue::_internal_mutable_transport_router() {
  
  if (transport_router_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::TransportRouter>(GetArenaForAllocation());
    transport_router_ = p;
  }
  return transport_router_;
}
inline ::serial::TransportRouter* TransportCatalogue::mutable_transport_router() {
  ::serial::TransportRouter* _msg = _internal_mutable_transport_router();
  // @@protoc_insertion_point(field_mutable:serial.TransportCatalogue.transport_router)
  return _msg;
}
inline void TransportCatalogue::set_allocated_transport_router(::serial::TransportRouter* transport_router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router_);
  }
  if (transport_router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router));
    if (message_arena != submessage_arena) {
      transport_router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_router, submessage_arena);
    }
    
  } else {
    
  }
  transport_router_ = transport_router;
  // @@protoc_insertion_point(field_set_allocated:serial.TransportCatalogue.transport_router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

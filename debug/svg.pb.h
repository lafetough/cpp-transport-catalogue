// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_svg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_svg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_svg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_svg_2eproto;
namespace serial {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Offset;
struct OffsetDefaultTypeInternal;
extern OffsetDefaultTypeInternal _Offset_default_instance_;
class RGB;
struct RGBDefaultTypeInternal;
extern RGBDefaultTypeInternal _RGB_default_instance_;
class RGBA;
struct RGBADefaultTypeInternal;
extern RGBADefaultTypeInternal _RGBA_default_instance_;
class SolidColor;
struct SolidColorDefaultTypeInternal;
extern SolidColorDefaultTypeInternal _SolidColor_default_instance_;
}  // namespace serial
PROTOBUF_NAMESPACE_OPEN
template<> ::serial::Color* Arena::CreateMaybeMessage<::serial::Color>(Arena*);
template<> ::serial::Offset* Arena::CreateMaybeMessage<::serial::Offset>(Arena*);
template<> ::serial::RGB* Arena::CreateMaybeMessage<::serial::RGB>(Arena*);
template<> ::serial::RGBA* Arena::CreateMaybeMessage<::serial::RGBA>(Arena*);
template<> ::serial::SolidColor* Arena::CreateMaybeMessage<::serial::SolidColor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serial {

// ===================================================================

class Offset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.Offset) */ {
 public:
  inline Offset() : Offset(nullptr) {}
  ~Offset() override;
  explicit constexpr Offset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Offset(const Offset& from);
  Offset(Offset&& from) noexcept
    : Offset() {
    *this = ::std::move(from);
  }

  inline Offset& operator=(const Offset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Offset& operator=(Offset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Offset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Offset* internal_default_instance() {
    return reinterpret_cast<const Offset*>(
               &_Offset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Offset& a, Offset& b) {
    a.Swap(&b);
  }
  inline void Swap(Offset* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Offset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Offset* New() const final {
    return new Offset();
  }

  Offset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Offset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Offset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Offset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Offset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.Offset";
  }
  protected:
  explicit Offset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:serial.Offset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class RGB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.RGB) */ {
 public:
  inline RGB() : RGB(nullptr) {}
  ~RGB() override;
  explicit constexpr RGB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RGB(const RGB& from);
  RGB(RGB&& from) noexcept
    : RGB() {
    *this = ::std::move(from);
  }

  inline RGB& operator=(const RGB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGB& operator=(RGB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RGB& default_instance() {
    return *internal_default_instance();
  }
  static inline const RGB* internal_default_instance() {
    return reinterpret_cast<const RGB*>(
               &_RGB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RGB& a, RGB& b) {
    a.Swap(&b);
  }
  inline void Swap(RGB* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RGB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RGB* New() const final {
    return new RGB();
  }

  RGB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RGB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RGB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.RGB";
  }
  protected:
  explicit RGB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:serial.RGB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class RGBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.RGBA) */ {
 public:
  inline RGBA() : RGBA(nullptr) {}
  ~RGBA() override;
  explicit constexpr RGBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RGBA(const RGBA& from);
  RGBA(RGBA&& from) noexcept
    : RGBA() {
    *this = ::std::move(from);
  }

  inline RGBA& operator=(const RGBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGBA& operator=(RGBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RGBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const RGBA* internal_default_instance() {
    return reinterpret_cast<const RGBA*>(
               &_RGBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RGBA& a, RGBA& b) {
    a.Swap(&b);
  }
  inline void Swap(RGBA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RGBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RGBA* New() const final {
    return new RGBA();
  }

  RGBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGBA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RGBA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RGBA& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGBA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.RGBA";
  }
  protected:
  explicit RGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRgbFieldNumber = 1,
    kAFieldNumber = 2,
  };
  // .serial.RGB rgb = 1;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::serial::RGB& rgb() const;
  PROTOBUF_MUST_USE_RESULT ::serial::RGB* release_rgb();
  ::serial::RGB* mutable_rgb();
  void set_allocated_rgb(::serial::RGB* rgb);
  private:
  const ::serial::RGB& _internal_rgb() const;
  ::serial::RGB* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::serial::RGB* rgb);
  ::serial::RGB* unsafe_arena_release_rgb();

  // double a = 2;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // @@protoc_insertion_point(class_scope:serial.RGBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::serial::RGB* rgb_;
  double a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class SolidColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.SolidColor) */ {
 public:
  inline SolidColor() : SolidColor(nullptr) {}
  ~SolidColor() override;
  explicit constexpr SolidColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SolidColor(const SolidColor& from);
  SolidColor(SolidColor&& from) noexcept
    : SolidColor() {
    *this = ::std::move(from);
  }

  inline SolidColor& operator=(const SolidColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolidColor& operator=(SolidColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolidColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolidColor* internal_default_instance() {
    return reinterpret_cast<const SolidColor*>(
               &_SolidColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SolidColor& a, SolidColor& b) {
    a.Swap(&b);
  }
  inline void Swap(SolidColor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolidColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolidColor* New() const final {
    return new SolidColor();
  }

  SolidColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolidColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SolidColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SolidColor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolidColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.SolidColor";
  }
  protected:
  explicit SolidColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // string color = 1;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // @@protoc_insertion_point(class_scope:serial.SolidColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serial.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit constexpr Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return new Color();
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Color& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serial.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRgbFieldNumber = 1,
    kRgbaFieldNumber = 2,
    kSolidColorFieldNumber = 3,
  };
  // .serial.RGB rgb = 1;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::serial::RGB& rgb() const;
  PROTOBUF_MUST_USE_RESULT ::serial::RGB* release_rgb();
  ::serial::RGB* mutable_rgb();
  void set_allocated_rgb(::serial::RGB* rgb);
  private:
  const ::serial::RGB& _internal_rgb() const;
  ::serial::RGB* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::serial::RGB* rgb);
  ::serial::RGB* unsafe_arena_release_rgb();

  // .serial.RGBA rgba = 2;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  const ::serial::RGBA& rgba() const;
  PROTOBUF_MUST_USE_RESULT ::serial::RGBA* release_rgba();
  ::serial::RGBA* mutable_rgba();
  void set_allocated_rgba(::serial::RGBA* rgba);
  private:
  const ::serial::RGBA& _internal_rgba() const;
  ::serial::RGBA* _internal_mutable_rgba();
  public:
  void unsafe_arena_set_allocated_rgba(
      ::serial::RGBA* rgba);
  ::serial::RGBA* unsafe_arena_release_rgba();

  // .serial.SolidColor solid_color = 3;
  bool has_solid_color() const;
  private:
  bool _internal_has_solid_color() const;
  public:
  void clear_solid_color();
  const ::serial::SolidColor& solid_color() const;
  PROTOBUF_MUST_USE_RESULT ::serial::SolidColor* release_solid_color();
  ::serial::SolidColor* mutable_solid_color();
  void set_allocated_solid_color(::serial::SolidColor* solid_color);
  private:
  const ::serial::SolidColor& _internal_solid_color() const;
  ::serial::SolidColor* _internal_mutable_solid_color();
  public:
  void unsafe_arena_set_allocated_solid_color(
      ::serial::SolidColor* solid_color);
  ::serial::SolidColor* unsafe_arena_release_solid_color();

  // @@protoc_insertion_point(class_scope:serial.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::serial::RGB* rgb_;
  ::serial::RGBA* rgba_;
  ::serial::SolidColor* solid_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Offset

// double x = 1;
inline void Offset::clear_x() {
  x_ = 0;
}
inline double Offset::_internal_x() const {
  return x_;
}
inline double Offset::x() const {
  // @@protoc_insertion_point(field_get:serial.Offset.x)
  return _internal_x();
}
inline void Offset::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Offset::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serial.Offset.x)
}

// double y = 2;
inline void Offset::clear_y() {
  y_ = 0;
}
inline double Offset::_internal_y() const {
  return y_;
}
inline double Offset::y() const {
  // @@protoc_insertion_point(field_get:serial.Offset.y)
  return _internal_y();
}
inline void Offset::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Offset::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serial.Offset.y)
}

// -------------------------------------------------------------------

// RGB

// uint32 r = 1;
inline void RGB::clear_r() {
  r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGB::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGB::r() const {
  // @@protoc_insertion_point(field_get:serial.RGB.r)
  return _internal_r();
}
inline void RGB::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  r_ = value;
}
inline void RGB::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:serial.RGB.r)
}

// uint32 g = 2;
inline void RGB::clear_g() {
  g_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGB::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGB::g() const {
  // @@protoc_insertion_point(field_get:serial.RGB.g)
  return _internal_g();
}
inline void RGB::_internal_set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  g_ = value;
}
inline void RGB::set_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:serial.RGB.g)
}

// uint32 b = 3;
inline void RGB::clear_b() {
  b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGB::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RGB::b() const {
  // @@protoc_insertion_point(field_get:serial.RGB.b)
  return _internal_b();
}
inline void RGB::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  b_ = value;
}
inline void RGB::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:serial.RGB.b)
}

// -------------------------------------------------------------------

// RGBA

// .serial.RGB rgb = 1;
inline bool RGBA::_internal_has_rgb() const {
  return this != internal_default_instance() && rgb_ != nullptr;
}
inline bool RGBA::has_rgb() const {
  return _internal_has_rgb();
}
inline void RGBA::clear_rgb() {
  if (GetArenaForAllocation() == nullptr && rgb_ != nullptr) {
    delete rgb_;
  }
  rgb_ = nullptr;
}
inline const ::serial::RGB& RGBA::_internal_rgb() const {
  const ::serial::RGB* p = rgb_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::RGB&>(
      ::serial::_RGB_default_instance_);
}
inline const ::serial::RGB& RGBA::rgb() const {
  // @@protoc_insertion_point(field_get:serial.RGBA.rgb)
  return _internal_rgb();
}
inline void RGBA::unsafe_arena_set_allocated_rgb(
    ::serial::RGB* rgb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgb_);
  }
  rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.RGBA.rgb)
}
inline ::serial::RGB* RGBA::release_rgb() {
  
  ::serial::RGB* temp = rgb_;
  rgb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::RGB* RGBA::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_release:serial.RGBA.rgb)
  
  ::serial::RGB* temp = rgb_;
  rgb_ = nullptr;
  return temp;
}
inline ::serial::RGB* RGBA::_internal_mutable_rgb() {
  
  if (rgb_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::RGB>(GetArenaForAllocation());
    rgb_ = p;
  }
  return rgb_;
}
inline ::serial::RGB* RGBA::mutable_rgb() {
  ::serial::RGB* _msg = _internal_mutable_rgb();
  // @@protoc_insertion_point(field_mutable:serial.RGBA.rgb)
  return _msg;
}
inline void RGBA::set_allocated_rgb(::serial::RGB* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rgb_;
  }
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::RGB>::GetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    
  } else {
    
  }
  rgb_ = rgb;
  // @@protoc_insertion_point(field_set_allocated:serial.RGBA.rgb)
}

// double a = 2;
inline void RGBA::clear_a() {
  a_ = 0;
}
inline double RGBA::_internal_a() const {
  return a_;
}
inline double RGBA::a() const {
  // @@protoc_insertion_point(field_get:serial.RGBA.a)
  return _internal_a();
}
inline void RGBA::_internal_set_a(double value) {
  
  a_ = value;
}
inline void RGBA::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:serial.RGBA.a)
}

// -------------------------------------------------------------------

// SolidColor

// string color = 1;
inline void SolidColor::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& SolidColor::color() const {
  // @@protoc_insertion_point(field_get:serial.SolidColor.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SolidColor::set_color(ArgT0&& arg0, ArgT... args) {
 
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serial.SolidColor.color)
}
inline std::string* SolidColor::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:serial.SolidColor.color)
  return _s;
}
inline const std::string& SolidColor::_internal_color() const {
  return color_.Get();
}
inline void SolidColor::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SolidColor::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SolidColor::release_color() {
  // @@protoc_insertion_point(field_release:serial.SolidColor.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SolidColor::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:serial.SolidColor.color)
}

// -------------------------------------------------------------------

// Color

// .serial.RGB rgb = 1;
inline bool Color::_internal_has_rgb() const {
  return this != internal_default_instance() && rgb_ != nullptr;
}
inline bool Color::has_rgb() const {
  return _internal_has_rgb();
}
inline void Color::clear_rgb() {
  if (GetArenaForAllocation() == nullptr && rgb_ != nullptr) {
    delete rgb_;
  }
  rgb_ = nullptr;
}
inline const ::serial::RGB& Color::_internal_rgb() const {
  const ::serial::RGB* p = rgb_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::RGB&>(
      ::serial::_RGB_default_instance_);
}
inline const ::serial::RGB& Color::rgb() const {
  // @@protoc_insertion_point(field_get:serial.Color.rgb)
  return _internal_rgb();
}
inline void Color::unsafe_arena_set_allocated_rgb(
    ::serial::RGB* rgb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgb_);
  }
  rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Color.rgb)
}
inline ::serial::RGB* Color::release_rgb() {
  
  ::serial::RGB* temp = rgb_;
  rgb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::RGB* Color::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_release:serial.Color.rgb)
  
  ::serial::RGB* temp = rgb_;
  rgb_ = nullptr;
  return temp;
}
inline ::serial::RGB* Color::_internal_mutable_rgb() {
  
  if (rgb_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::RGB>(GetArenaForAllocation());
    rgb_ = p;
  }
  return rgb_;
}
inline ::serial::RGB* Color::mutable_rgb() {
  ::serial::RGB* _msg = _internal_mutable_rgb();
  // @@protoc_insertion_point(field_mutable:serial.Color.rgb)
  return _msg;
}
inline void Color::set_allocated_rgb(::serial::RGB* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rgb_;
  }
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::RGB>::GetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    
  } else {
    
  }
  rgb_ = rgb;
  // @@protoc_insertion_point(field_set_allocated:serial.Color.rgb)
}

// .serial.RGBA rgba = 2;
inline bool Color::_internal_has_rgba() const {
  return this != internal_default_instance() && rgba_ != nullptr;
}
inline bool Color::has_rgba() const {
  return _internal_has_rgba();
}
inline void Color::clear_rgba() {
  if (GetArenaForAllocation() == nullptr && rgba_ != nullptr) {
    delete rgba_;
  }
  rgba_ = nullptr;
}
inline const ::serial::RGBA& Color::_internal_rgba() const {
  const ::serial::RGBA* p = rgba_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::RGBA&>(
      ::serial::_RGBA_default_instance_);
}
inline const ::serial::RGBA& Color::rgba() const {
  // @@protoc_insertion_point(field_get:serial.Color.rgba)
  return _internal_rgba();
}
inline void Color::unsafe_arena_set_allocated_rgba(
    ::serial::RGBA* rgba) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgba_);
  }
  rgba_ = rgba;
  if (rgba) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Color.rgba)
}
inline ::serial::RGBA* Color::release_rgba() {
  
  ::serial::RGBA* temp = rgba_;
  rgba_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::RGBA* Color::unsafe_arena_release_rgba() {
  // @@protoc_insertion_point(field_release:serial.Color.rgba)
  
  ::serial::RGBA* temp = rgba_;
  rgba_ = nullptr;
  return temp;
}
inline ::serial::RGBA* Color::_internal_mutable_rgba() {
  
  if (rgba_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::RGBA>(GetArenaForAllocation());
    rgba_ = p;
  }
  return rgba_;
}
inline ::serial::RGBA* Color::mutable_rgba() {
  ::serial::RGBA* _msg = _internal_mutable_rgba();
  // @@protoc_insertion_point(field_mutable:serial.Color.rgba)
  return _msg;
}
inline void Color::set_allocated_rgba(::serial::RGBA* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rgba_;
  }
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::RGBA>::GetOwningArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    
  } else {
    
  }
  rgba_ = rgba;
  // @@protoc_insertion_point(field_set_allocated:serial.Color.rgba)
}

// .serial.SolidColor solid_color = 3;
inline bool Color::_internal_has_solid_color() const {
  return this != internal_default_instance() && solid_color_ != nullptr;
}
inline bool Color::has_solid_color() const {
  return _internal_has_solid_color();
}
inline void Color::clear_solid_color() {
  if (GetArenaForAllocation() == nullptr && solid_color_ != nullptr) {
    delete solid_color_;
  }
  solid_color_ = nullptr;
}
inline const ::serial::SolidColor& Color::_internal_solid_color() const {
  const ::serial::SolidColor* p = solid_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::serial::SolidColor&>(
      ::serial::_SolidColor_default_instance_);
}
inline const ::serial::SolidColor& Color::solid_color() const {
  // @@protoc_insertion_point(field_get:serial.Color.solid_color)
  return _internal_solid_color();
}
inline void Color::unsafe_arena_set_allocated_solid_color(
    ::serial::SolidColor* solid_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solid_color_);
  }
  solid_color_ = solid_color;
  if (solid_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serial.Color.solid_color)
}
inline ::serial::SolidColor* Color::release_solid_color() {
  
  ::serial::SolidColor* temp = solid_color_;
  solid_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serial::SolidColor* Color::unsafe_arena_release_solid_color() {
  // @@protoc_insertion_point(field_release:serial.Color.solid_color)
  
  ::serial::SolidColor* temp = solid_color_;
  solid_color_ = nullptr;
  return temp;
}
inline ::serial::SolidColor* Color::_internal_mutable_solid_color() {
  
  if (solid_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::serial::SolidColor>(GetArenaForAllocation());
    solid_color_ = p;
  }
  return solid_color_;
}
inline ::serial::SolidColor* Color::mutable_solid_color() {
  ::serial::SolidColor* _msg = _internal_mutable_solid_color();
  // @@protoc_insertion_point(field_mutable:serial.Color.solid_color)
  return _msg;
}
inline void Color::set_allocated_solid_color(::serial::SolidColor* solid_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete solid_color_;
  }
  if (solid_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::serial::SolidColor>::GetOwningArena(solid_color);
    if (message_arena != submessage_arena) {
      solid_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solid_color, submessage_arena);
    }
    
  } else {
    
  }
  solid_color_ = solid_color;
  // @@protoc_insertion_point(field_set_allocated:serial.Color.solid_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
